#!/bin/bash -norc
dnl        This file is an input file used by the GNU "autoconf" program to
dnl        generate the file "configure", which is run during Tcl installation
dnl        to configure the system for the local environment.
#

#-----------------------------------------------------------------------
# This initializes the environment with PACKAGE_NAME and PACKAGE_VERSION
# set as provided.  These will also be added as -D defs in your Makefile
# so you can encode the package version directly into the source files.
#-----------------------------------------------------------------------

AC_INIT([cookfs],[1.6.0])

#--------------------------------------------------------------------
# Call TEA_INIT as the first TEA_ macro to set up initial vars.
# This will define a ${TEA_PLATFORM} variable == "unix" or "windows"
# as well as PKG_LIB_FILE and PKG_STUB_LIB_FILE.
#--------------------------------------------------------------------

TEA_INIT([3.13])

AC_CONFIG_AUX_DIR(tclconfig)

#--------------------------------------------------------------------
# Load the tclConfig.sh file
#--------------------------------------------------------------------

TEA_PATH_TCLCONFIG
TEA_LOAD_TCLCONFIG

#--------------------------------------------------------------------
# Load the tkConfig.sh file if necessary (Tk extension)
#--------------------------------------------------------------------

#TEA_PATH_TKCONFIG
#TEA_LOAD_TKCONFIG

#-----------------------------------------------------------------------
# Handle the --prefix=... option by defaulting to what Tcl gave.
# Must be called after TEA_LOAD_TCLCONFIG and before TEA_SETUP_COMPILER.
#-----------------------------------------------------------------------

TEA_PREFIX

#-----------------------------------------------------------------------
# Standard compiler checks.
# This sets up CC by using the CC env var, or looks for gcc otherwise.
# This also calls AC_PROG_CC, AC_PROG_INSTALL and a few others to create
# the basic setup necessary to compile executables.
#-----------------------------------------------------------------------

TEA_SETUP_COMPILER

TEA_ADD_SOURCES([cookfs.c common.c md5.h bindata.c hashes.c])
TEA_ADD_HEADERS([])
TEA_ADD_INCLUDES([-I\"`${CYGPATH} ${srcdir}/generic`\"])
TEA_ADD_LIBS([])
TEA_ADD_CFLAGS([-Wall -Wextra -pedantic -fno-asynchronous-unwind-tables -ffunction-sections -fdata-sections -fvisibility=hidden])
TEA_ADD_STUB_SOURCES([])
TEA_ADD_TCL_SOURCES([
    scripts/writerchannel.tcl
    scripts/vfs.tcl
    scripts/asyncworker_process.tcl
    scripts/asyncworker_thread.tcl
    scripts/readerchannel.tcl
    scripts/writer.tcl
])

#--------------------------------------------------------------------
# Define a special symbol for Windows (BUILD_sample in this case) so
# that we create the export library with the dll.
#
# Windows creates a few extra files that need to be cleaned up.
# You can add more files to clean if your extension creates any extra
# files.
#
# TEA_ADD_* any platform specific compiler/build info here.
#--------------------------------------------------------------------

# Add pkgIndex.tcl if it is generated in the Makefile instead of ./configure
# and change Makefile.in to move it from CONFIG_CLEAN_FILES to BINARIES var.
#CLEANFILES="pkgIndex.tcl"
if test "${TEA_PLATFORM}" = "windows" ; then
    # Ensure no empty else clauses
    :
    #TEA_ADD_SOURCES([win/winFile.c])
    #TEA_ADD_INCLUDES([-I\"$(${CYGPATH} ${srcdir}/win)\"])
    TEA_ADD_CFLAGS([-DUNICODE -D_UNICODE -DWINVER=0x0501 -D_WIN32_WINNT=0x0501])
else
    # Ensure no empty else clauses
    :
    #TEA_ADD_SOURCES([unix/unixFile.c])
    #TEA_ADD_LIBS([-lsuperfly])
fi

# Treat compiler warnings as errors on all platforms except MacOS.
# 7z SDK has some warning on MacOS 10.12.
if test "${TCL_SHLIB_SUFFIX}" != ".dylib"; then
    TEA_ADD_CFLAGS([-Werror])
fi

AC_SUBST(CLEANFILES)

TEA_PUBLIC_TCL_HEADERS
#TEA_PRIVATE_TCL_HEADERS

#TEA_PUBLIC_TK_HEADERS
#TEA_PRIVATE_TK_HEADERS
#TEA_PATH_X

TEA_ENABLE_THREADS
TEA_ENABLE_SHARED

TEA_CONFIG_CFLAGS

TEA_ENABLE_SYMBOLS

if test "${SHARED_BUILD}" = "1"; then
AC_DEFINE(USE_TCL_STUBS, 1, [Use Tcl stubs])
fi

AC_ARG_ENABLE(internal-debug,  [  --enable-internal-debug   Enable internal debugging mechanism. Defaults to false],INTERNALDEBUG=${enableval},    INTERNALDEBUG=no)
AC_ARG_ENABLE(bz2,             [  --enable-bz2              Use bz2 compression. Defaults to false],                USEBZ2=${enableval},           USEBZ2=no)
AC_ARG_ENABLE(lzma,            [  --enable-lzma             Use lzma compression. Defaults to true],                USELZMA=${enableval},          USELZMA=yes)
AC_ARG_ENABLE(tcl-fallback,    [  --enable-tcl-fallback     Install Tcl scripts if load fails. Defaults to false],  USEFALLBACK=${enableval},      USEFALLBACK=no)
AC_ARG_ENABLE(c-pages,         [  --disable-c-pages         Use pages handling written in C. Defaults to true],     USECPAGES=${enableval},        USECPAGES=yes)
AC_ARG_ENABLE(c-fsindex,       [  --disable-c-fsindex       Use index handling written in C. Defaults to true],     USECFSINDEX=${enableval},      USECFSINDEX=yes)
AC_ARG_ENABLE(c-readerchannel, [  --disable-c-readerchannel Use reader handler written in C. Defaults to true],     USECREADERCHAN=${enableval},   USECREADERCHAN=yes)
AC_ARG_ENABLE(c-writerchannel, [  --disable-c-writerchannel Use writer handler written in C. Defaults to true],     USECWRITERCHAN=${enableval},   USECWRITERCHAN=yes)
AC_ARG_ENABLE(c-pkgconfig,     [  --disable-c-pkgconfig     Use pkgconfig written in C. Defaults to true],          USECPKGCONFIG=${enableval},    USECPKGCONFIG=yes)
AC_ARG_ENABLE(c-vfs,           [  --disable-c-vfs           Use VFS support written in C. Defaults to true],        USECVFS=${enableval},          USECVFS=yes)
AC_ARG_ENABLE(c-writer,        [  --disable-c-writer        Use writer handler written in C. Defaults to true],     USECWRITER=${enableval},       USECWRITER=yes)
AC_ARG_ENABLE(tcl-commands,    [  --disable-tcl-commands    Enable Tcl commands for objects. Defaults to true],     USETCLCMDS=${enableval},       USETCLCMDS=yes)


if test ${INTERNALDEBUG} = yes; then
    AC_DEFINE(COOKFS_INTERNAL_DEBUG)
fi

TEA_ADD_TCL_SOURCES([scripts/pages.tcl])
TEA_ADD_TCL_SOURCES([scripts/readerchannel.tcl])
TEA_ADD_TCL_SOURCES([scripts/fsindex.tcl])

if test ${USECPAGES} = yes; then
    AC_DEFINE(COOKFS_USECPAGES)
    COOKFS_PKGCONFIG_USECPAGES=1
    COOKFS_PKGCONFIG_FEATURE_ASIDE=1
    TEA_ADD_SOURCES([pages.c pagesCompr.c pagesCmd.c])

    # enable bz2 files only if pages are handled using C
    if test ${USEBZ2} = yes; then
        BUILDCCODE=yes
        TEA_ADD_SOURCES([bzip2/blocksort.c bzip2/huffman.c bzip2/crctable.c bzip2/randtable.c bzip2/compress.c bzip2/decompress.c bzip2/bzlib.c])
        AC_DEFINE(COOKFS_USEBZ2)
        COOKFS_PKGCONFIG_USEBZ2=1
    else
        COOKFS_PKGCONFIG_USEBZ2=0
    fi

    if test ${USELZMA} = yes; then
        BUILDCCODE=yes
        # lzma requires these CPU features: sse4.1 avx avx2
        AC_MSG_CHECKING(for SSE4.1 instruction set)
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
            #include <smmintrin.h>
        ]],[])],
            [AC_MSG_RESULT(yes)],
            [AC_MSG_RESULT([no, adding -msse4.1]); TEA_ADD_CFLAGS([-msse4.1])]
        )
        AC_MSG_CHECKING(for AVX/AVX2 instruction set)
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
            #include <immintrin.h>
        ]],[[
            __m256i sub2;
        ]])],
          [AC_MSG_RESULT(yes)],
          [AC_MSG_RESULT([no, adding -mavx -mavx2]); TEA_ADD_CFLAGS([-mavx -mavx2])]
        )
        TEA_ADD_SOURCES([7zip/C/LzmaEnc.c 7zip/C/LzmaDec.c 7zip/C/LzFind.c 7zip/C/CpuArch.c])
        TEA_ADD_INCLUDES([-I\"`${CYGPATH} ${srcdir}/7zip/C`\"])
        AC_DEFINE(COOKFS_USELZMA)
        # Disable multi-thread
        AC_DEFINE(Z7_ST)
        # Enable size optimization
        AC_DEFINE(Z7_LZMA_SIZE_OPT)
        COOKFS_PKGCONFIG_USELZMA=1
    else
        COOKFS_PKGCONFIG_USELZMA=0
    fi
else
    COOKFS_PKGCONFIG_USECPAGES=0
    COOKFS_PKGCONFIG_FEATURE_ASIDE=0
    COOKFS_PKGCONFIG_USELZMA=0

    # Tcl implementation offers bzip2 compression only with Trf package
    COOKFS_PKGCONFIG_USEBZ2=0

    # c-vfs requires c-pages
    USECVFS="no"
    # c-readerchannel requires c-pages
    USECREADERCHAN="no"
    # c-writerchannel requires c-pages
    USECWRITERCHAN="no"
    # c-writer requires c-pages
    USECWRITER="no"
fi

if test ${USECFSINDEX} = yes; then
    AC_DEFINE(COOKFS_USECFSINDEX)
    COOKFS_PKGCONFIG_USECFSINDEX=1
    TEA_ADD_SOURCES([fsindex.c fsindexIO.c fsindexCmd.c])
else
    COOKFS_PKGCONFIG_USECFSINDEX=0
    # c-vfs requires c-fsindex
    USECVFS="no"
    # c-readerchannel requires c-fsindex
    USECREADERCHAN="no"
    # c-writerchannel requires c-fsindex
    USECWRITERCHAN="no"
    # c-writer requires c-pages
    USECWRITER="no"
fi

COOKFS_PKGCONFIG_FEATURE_METADATA=1

if test ${USECREADERCHAN} = yes; then
    AC_DEFINE(COOKFS_USECREADERCHAN)
    COOKFS_PKGCONFIG_USECREADERCHAN=1
    TEA_ADD_SOURCES([readerchannel.c readerchannelIO.c])
else
    COOKFS_PKGCONFIG_USECREADERCHAN=0
    # c-vfs requires c-readerchannel
    USECVFS="no"
fi

# c-writer / c-writerchan / c-vfs must be enabled together
if test ${USECWRITER} = yes \
    && test ${USECWRITERCHAN} = yes \
    && test ${USECVFS} = yes
then

    AC_DEFINE(COOKFS_USECWRITER)
    COOKFS_PKGCONFIG_USECWRITER=1
    TEA_ADD_SOURCES([writer.c writerCmd.c])

    AC_DEFINE(COOKFS_USECWRITERCHAN)
    COOKFS_PKGCONFIG_USECWRITERCHAN=1
    TEA_ADD_SOURCES([writerchannel.c writerchannelIO.c])

    AC_DEFINE(COOKFS_USECVFS)
    COOKFS_PKGCONFIG_USECVFS=1
    TEA_ADD_SOURCES([vfsDriver.c vfsVfs.c vfs.c vfsCmd.c])

else
    COOKFS_PKGCONFIG_USECWRITER=0
    COOKFS_PKGCONFIG_USECWRITERCHAN=0
    COOKFS_PKGCONFIG_USECVFS=0
fi

if test ${USETCLCMDS} = no \
  && test ${USECWRITER} = yes \
  && test ${USECWRITERCHAN} = yes \
  && test ${USECVFS} = yes \
  && test ${USECPAGES} = yes \
  && test ${USECFSINDEX} = yes \
  && test ${USECREADERCHAN} = yes
then
    COOKFS_PKGCONFIG_USETCLCMDS=0
else
    AC_DEFINE(COOKFS_USETCLCMDS)
    COOKFS_PKGCONFIG_USETCLCMDS=1
fi


AC_SUBST(COOKFS_PKGCONFIG_FEATURE_ASIDE)
AC_SUBST(COOKFS_PKGCONFIG_USECPAGES)
AC_SUBST(COOKFS_PKGCONFIG_USECREADERCHAN)
AC_SUBST(COOKFS_PKGCONFIG_USECWRITERCHAN)
AC_SUBST(COOKFS_PKGCONFIG_USEBZ2)
AC_SUBST(COOKFS_PKGCONFIG_USELZMA)
AC_SUBST(COOKFS_PKGCONFIG_USECFSINDEX)
AC_SUBST(COOKFS_PKGCONFIG_FEATURE_METADATA)
AC_SUBST(COOKFS_PKGCONFIG_USECVFS)
AC_SUBST(COOKFS_PKGCONFIG_USECWRITER)
AC_SUBST(COOKFS_PKGCONFIG_USETCLCMDS)

if test ${USECPKGCONFIG} = yes; then
    COOKFS_PKGCONFIG_USECPKGCONFIG=1
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_FEATURE_ASIDE, $COOKFS_PKGCONFIG_FEATURE_ASIDE)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USECPAGES, $COOKFS_PKGCONFIG_USECPAGES)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USECREADERCHAN, $COOKFS_PKGCONFIG_USECREADERCHAN)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USECWRITERCHAN, $COOKFS_PKGCONFIG_USECWRITERCHAN)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USECPKGCONFIG, $COOKFS_PKGCONFIG_USECPKGCONFIG)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USEBZ2, $COOKFS_PKGCONFIG_USEBZ2)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USELZMA, $COOKFS_PKGCONFIG_USELZMA)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USECFSINDEX, $COOKFS_PKGCONFIG_USECFSINDEX)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_FEATURE_METADATA, $COOKFS_PKGCONFIG_FEATURE_METADATA)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USECVFS, $COOKFS_PKGCONFIG_USECVFS)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USECWRITER, $COOKFS_PKGCONFIG_USECWRITER)
    AC_DEFINE_UNQUOTED(COOKFS_PKGCONFIG_USETCLCMDS, $COOKFS_PKGCONFIG_USETCLCMDS)

    AC_DEFINE(COOKFS_USECPKGCONFIG)
else
    COOKFS_PKGCONFIG_USECPKGCONFIG=0
fi

AC_SUBST(COOKFS_PKGCONFIG_USECPKGCONFIG)

#--------------------------------------------------------------------
# This macro generates a line to use when building a library.  It
# depends on values set by the TEA_ENABLE_SHARED, TEA_ENABLE_SYMBOLS,
# and TEA_LOAD_TCLCONFIG macros above.
#--------------------------------------------------------------------

TEA_MAKE_LIB

COOKFS_SET_LDFLAGS

#--------------------------------------------------------------------
# Determine the name of the tclsh and/or wish executables in the
# Tcl and Tk build directories or the location they were installed
# into. These paths are used to support running test cases only,
# the Makefile should not be making use of these paths to generate
# a pkgIndex.tcl file or anything else at extension build time.
#--------------------------------------------------------------------

TEA_PROG_TCLSH
#TEA_PROG_WISH
COOKFS_PROG_TCLSH

#--------------------------------------------------------------------
# Finally, substitute all of the various values into the Makefile.
# You may alternatively have a special pkgIndex.tcl.in or other files
# which require substituting th AC variables in.  Include these here.
#--------------------------------------------------------------------

AC_CONFIG_FILES([Makefile pkgIndex.tcl pkgconfig.tcl])
AC_OUTPUT

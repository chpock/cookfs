
tcltest::test cookfsVfsCache-1 "Test cache eviction based on weight and age" -setup {
    set file [tcltest::makeFile {} cookfs.cfs]
    vfs::cookfs::Mount $file $file -smallfilesize 50 -smallfilebuffer 5 -pagesize 150
    tcltest::makeFile [string repeat 1 100] test1 $file
    tcltest::makeFile 2.1 test2.1 $file
    tcltest::makeFile 2.2 test2.2 $file
    tcltest::makeFile [string repeat 3 100] test3 $file
    tcltest::makeFile 4.1 test4.1 $file
    tcltest::makeFile 4.2 test4.2 $file
    tcltest::makeFile [string repeat 5 200] test5 $file
    tcltest::makeFile 6.1 test6.1 $file
    tcltest::makeFile 6.2 test6.2 $file
    vfs::unmount $file
} -body {
    set result [list {}]
    # The test VFS contains the following pages with the corresponding number of files:
    # page#0        - 1 (test1)
    # page#1        - 2 (test2.1 test2.2)
    # page#2        - 1 (test3)
    # page#3        - 2 (test4.1 test4.2)
    # page#4+page#5 - 1 (test5)
    # page#6        - 2 (test6.1 test6.2)
    set fsid [vfs::cookfs::Mount -readonly -pagecachesize 3 $file $file]
    # set expected ticktock age - 5 to not depend on the default value and to make this test fully reproducible
    [set ${fsid}(pages)] ticktock 4
    # Make sure we have the expected set of pages. Everything below won't work if it's not true.
    lappend result [lmap x [lsort [[set ${fsid}(index)] list ""]] { set x [lindex [[set ${fsid}(index)] get $x] 2] }]
    # expected: {0 0 101} {1 0 4} {1 4 4} {2 0 101} {3 0 4} {3 4 4} {4 0 150 5 0 51} {6 0 4} {6 4 4}
    #
    # cache should be empty on start
    lappend result [[set ${fsid}(pages)] getcache]
    # expected {}
    #
    # read 1st file from page#0
    read [set fd [open [file join $file test1] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#0-w:0-a:0
    #
    # read file2.1 from page#1
    # since this is the first file from a multi-file page, the age of all entries
    # should be increased because that page is not yet cached
    read [set fd [open [file join $file test2.1] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#1-w:1-a:0 i#0-w:0-a:1
    #
    # read file2.2 from page#1
    # since this file is from the same page as file 2.1, the cache picture should not be changed
    read [set fd [open [file join $file test2.2] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#1-w:1-a:0 i#0-w:0-a:1
    #
    # read file1 from page#0 again
    # since this file in cache, the age for page#1 should not be changed,
    # but the age of page #0 should be reset, and it should be moved to the top of the cache
    read [set fd [open [file join $file test1] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#0-w:0-a:0 i#1-w:1-a:0
    #
    # read file3 from page#2
    # as this is a new file, the age for page#0 and page# should be increased
    read [set fd [open [file join $file test3] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#2-w:0-a:0 i#0-w:0-a:1 i#1-w:1-a:1
    #
    # read file4.1 from page#3
    # This is a new file, the age for all pages should be increased.
    # Also, we have reached a cache limit. page#0 and page#2 have
    # the lowest weight 0, and page#0 is the oldest. This, page#0 must be evicted.
    read [set fd [open [file join $file test4.1] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#3-w:1-a:0 i#2-w:0-a:1 i#1-w:1-a:2
    #
    # read file4.2 from page#3
    # This page is already in the cache, so the age of all pages should remain the same.
    # Also, this page already at the top. Thus, the overall cache picture should remain the same.
    read [set fd [open [file join $file test4.2] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#3-w:1-a:0 i#2-w:0-a:1 i#1-w:1-a:2
    #
    # read file5 from page#4 and page#5
    # This file takes up 2 pages. The expected behaviour should be as follows:
    # When we read the first page#4, page#2 should be evicted as the page with the
    # least weight (0). Also, the age for other pages should be increased.
    # Thus, the expected picture should as follows:
    # i#4-w:0-a:0 i#3-w:1-a:1 i#1-w:1-a:3
    # When we read the second page#5, page#4 should be evicted as the page with
    # the least weight. But the age for other pages should remain the same.
    # The picture should be as follows:
    # i#5-w:0-a:0 i#3-w:1-a:1 i#1-w:1-a:3
    read [set fd [open [file join $file test5] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#5-w:0-a:0 i#3-w:1-a:1 i#1-w:1-a:3
    #
    # read file1 from page#0 again
    # When we read this file, the age of all pages should increase.
    # The age of page#1 will reach end-of-life limit (4) that we set at the beginning
    # of this test case. Its weight will be reset to 0 and it will be evicted as
    # the page with the lowest weight.
    read [set fd [open [file join $file test1] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#0-w:0-a:0 i#5-w:0-a:1 i#3-w:1-a:2
    #
    # read file5 from page#4 and page#5
    # When we read the first page#4, page#5 should be evicted and the age for all
    # pages should be increased. The picture should be as follows:
    # i#4-w:0-a:0 i#0-w:0-a:1 i#3-w:1-a:3
    # When we read the second page#5, the age for all pages must not be changed,
    # as this is the second page of a large file. Thus, page#0 should be evicted as
    # the oldest page with weight 0. The picture should be as follows:
    # i#5-w:0-a:0 i#4-w:0-a:0 i#3-w:1-a:3
    read [set fd [open [file join $file test5] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#5-w:0-a:0 i#4-w:0-a:0 i#3-w:1-a:3
    #
    # read test3 from page#2
    # The age for all pages should be increased. This means, that page#3 will reach
    # the end-of-life age (4). Its weight will be reset and it will be the best candidate
    # for eviction since it is the oldest page in the cache.
    read [set fd [open [file join $file test3] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: i#2-w:0-a:0 i#5-w:0-a:1 i#4-w:0-a:1
    #
    # Now let's check that the multipage file occupies the entire cache if it is available.
    [set ${fsid}(pages)] cachesize 0
    # make sure that cache is empty and has zero size
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: {}
    # read file5 from page#4 and page#5
    # cache has zero size, thus it is not available and should be empty
    read [set fd [open [file join $file test5] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    # expected: {}
    # increase the cache size
    [set ${fsid}(pages)] cachesize 1
    # read file5
    # Since the cache size is 1, we expect only the last page (page#5) from file5 to be in the cache.
    read [set fd [open [file join $file test5] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    #expected: i#5-w:0-a:0
    #
    # increase the cache size more
    [set ${fsid}(pages)] cachesize 3
    # read file5
    # Since the cache size is 3, we expect both pages (page#4 and page#5) to be in the cache.
    read [set fd [open [file join $file test5] r]]; close $fd
    lappend result [lmap x [[set ${fsid}(pages)] getcache] { set x i#[dict get $x index]-w:[dict get $x weight]-a:[dict get $x age] }]
    #expected: i#5-w:0-a:0 i#4-w:0-a:0
    lappend result {}
    # let's see what we have
    join $result \n
} -cleanup {
    catch { close $fd }
    catch { vfs::unmount $file }
    file delete -force $file
} -result {
{0 0 101} {1 0 4} {1 4 4} {2 0 101} {3 0 4} {3 4 4} {4 0 150 5 0 51} {6 0 4} {6 4 4}

i#0-w:0-a:0
i#1-w:1-a:0 i#0-w:0-a:1
i#1-w:1-a:0 i#0-w:0-a:1
i#0-w:0-a:0 i#1-w:1-a:0
i#2-w:0-a:0 i#0-w:0-a:1 i#1-w:1-a:1
i#3-w:1-a:0 i#2-w:0-a:1 i#1-w:1-a:2
i#3-w:1-a:0 i#2-w:0-a:1 i#1-w:1-a:2
i#5-w:0-a:0 i#3-w:1-a:1 i#1-w:1-a:3
i#0-w:0-a:0 i#5-w:0-a:1 i#3-w:1-a:2
i#5-w:0-a:0 i#4-w:0-a:0 i#3-w:1-a:3
i#2-w:0-a:0 i#5-w:0-a:1 i#4-w:0-a:1


i#5-w:0-a:0
i#5-w:0-a:0 i#4-w:0-a:0
}

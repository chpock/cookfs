source [file join [file dirname [info script]] common.tcl]

# All complex cases should be checked in pagesEncrypt.test
#
# Here we are just checking if the encryption related commands/options
# are correctly passed from VFS to the pages object.

test cookfsVfsEncrypt-1.1.1 "Test error when password argument has no value" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
} -body {
    cookfs::Mount -password $file $file
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {wrong # args: should be "cookfs::Mount ?-option value ...? archive local ?-option value ...?"}

test cookfsVfsEncrypt-1.1.2 "Test error when password argument has no value" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
} -body {
    cookfs::Mount $file $file -password
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {missing argument to -password option}

test cookfsVfsEncrypt-1.1.3 "Test error when password argument as an empty string" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
} -body {
    cookfs::Mount $file $file -password ""
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {Unable to create Cookfs object: password value must not be an empty string}

test cookfsVfsEncrypt-1.1.4 "Test error when password argument specified for writetomemoty VFS" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
} -body {
    cookfs::Mount $file $file -writetomemory -password ""
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {encryption options have no effent in writetomemory VFS}

test cookfsVfsEncrypt-1.2.1 "Test error when encryptlevel argument has no value" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
} -body {
    cookfs::Mount -encryptlevel $file $file
} -cleanup {
    catch { cookfs::Unmount $file }
} -match glob -error {integer argument is expected for -encryptlevel option, but got "*"}

test cookfsVfsEncrypt-1.2.2 "Test error when encryptlevel argument has no value" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
} -body {
    cookfs::Mount $file $file -encryptlevel
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {missing argument to -encryptlevel option}

test cookfsVfsEncrypt-1.2.3 "Test error when encryptlevel argument specified for writetomemoty VFS" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
} -body {
    cookfs::Mount $file $file -encryptlevel 1 -writetomemory
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {encryption options have no effent in writetomemory VFS}

test cookfsVfsEncrypt-2.1 "Test error for password subcommand with no args" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
    set fsid [cookfs::Mount $file $file -compression none]
} -body {
    $fsid password
} -cleanup {
    cookfs::Unmount $file
} -match glob -error {wrong # args: should be "::cookfs::*::vfs::mount* password password"}

test cookfsVfsEncrypt-2.2 "Test error for password subcommand with wrong # args" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
    set fsid [cookfs::Mount $file $file -compression none]
} -body {
    $fsid password a a
} -cleanup {
    cookfs::Unmount $file
} -match glob -error {wrong # args: should be "::cookfs::*::vfs::mount* password password"}

test cookfsVfsEncrypt-2.3 "Test error for password for writetomemoty VFS" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} cookfs.cfs]
    set fsid [cookfs::Mount $file $file -compression none -writetomemory]
} -body {
    $fsid password a
} -cleanup {
    cookfs::Unmount $file
} -error {unable to set a password on a writetomemory VFS}

test cookfsVfsEncrypt-3.1 "Check that there are no additinal data after signature with no encryption" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    variable size
    variable data
    variable offset
} -body {
    cookfs::Mount $file $file -compression none
    makeFile {TEST} test.file $file
    cookfs::Unmount $file

    set size [file size $file]
    set data [viewBinFile $file]
    set offset [string last "CFS0003" $data]
    incr offset [string length "CFS0003"]

    expr { $size - $offset }

} -cleanup {
    catch { cookfs::Unmount $file }
} -result 0

test cookfsVfsEncrypt-3.2 "Check that there are 16 bytes (password salt) additinal data after signature with file encryption" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    variable size
    variable data
    variable offset
} -body {
    cookfs::Mount $file $file -compression none -encryptlevel 0 -password foo
    makeFile {TEST} test.file $file
    cookfs::Unmount $file

    set size [file size $file]
    set data [viewBinFile $file]
    set offset [string last "CFS0003" $data]
    incr offset [string length "CFS0003"]

    expr { $size - $offset }

} -cleanup {
    catch { cookfs::Unmount $file }
} -result 16

test cookfsVfsEncrypt-3.3 "Check that there are 64 bytes additinal data after signature with key encryption" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    variable size
    variable data
    variable offset
} -body {
    cookfs::Mount $file $file -compression none -encryptlevel 0 -encryptkey -password foo
    makeFile {TEST} test.file $file
    cookfs::Unmount $file

    set size [file size $file]
    set data [viewBinFile $file]
    set offset [string last "CFS0003" $data]
    incr offset [string length "CFS0003"]

    expr { $size - $offset }

    # we expect 80 bytes here:
    # 16 bytes - password salt
    # 16 bytes - encrypted key IV
    # 48 bytes - encrypted key + hash of the encrypted key

} -cleanup {
    catch { cookfs::Unmount $file }
} -result 80

test cookfsVfsEncrypt-4.1 "Test file encryption" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -password foo]
    # this file should be encrypted
    makeFile {TEST00TEST} test0 $file
    $fsid password ""
    # this page should be not encrypted
    makeFile {TEST01TEST} test1 $file
    $fsid password "bar"
    # this page should be encrypted
    makeFile {TEST02TEST} test2 $file
    cookfs::Unmount $file
    variable data
} -body {
    # check how pages were stored to archive
    set data [viewBinFile $file]
    assertNotContain $data "TEST00TEST" "test0 should be encrypted"
    assertContain $data "TEST01TEST" "test1 should be unencrypted"
    assertNotContain $data "TEST02TEST" "test2 should be encrypted"

    # check how files can be read from archive
    set fsid [cookfs::Mount $file $file -readonly -password foo]
    assertEq [viewFile test0 $file] "TEST00TEST" "test0: incorrect data"
    assertEq [viewFile test1 $file] "TEST01TEST" "test1: incorrect data"
    $fsid password "bar"
    assertEq [viewFile test2 $file] "TEST02TEST" "test2: incorrect data"
} -cleanup {
    cookfs::Unmount $file
} -ok

test cookfsVfsEncrypt-4.2 "Test file encryption, password set after initialization" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0]
    # this file should be not encrypted
    makeFile {TEST00TEST} test0 $file
    $fsid password "foo"
    # this file should be encrypted
    makeFile {TEST01TEST} test1 $file
    $fsid password "bar"
    # this page should be encrypted
    makeFile {TEST02TEST} test2 $file
    cookfs::Unmount $file
    variable data
} -body {
    # check how pages were stored to archive
    set data [viewBinFile $file]
    assertContain $data "TEST00TEST" "test0 should be unencrypted"
    assertNotContain $data "TEST01TEST" "test1 should be encrypted"
    assertNotContain $data "TEST02TEST" "test2 should be encrypted"

    # check how files can be read from archive
    set fsid [cookfs::Mount $file $file -readonly]
    assertEq [viewFile test0 $file] "TEST00TEST" "test0: incorrect data"
    $fsid password "foo"
    assertEq [viewFile test1 $file] "TEST01TEST" "test1: incorrect data"
    $fsid password "bar"
    assertEq [viewFile test2 $file] "TEST02TEST" "test2: incorrect data"
} -cleanup {
    cookfs::Unmount $file
} -ok

test cookfsVfsEncrypt-4.3.1 "Test file encryption, no password when using writerchannel" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -password foo -smallfilebuffer 0]
    set checkfile [makeBinFile "TEST" test $file]
    variable fd
} -body {
    $fsid password ""
    set fd [open $checkfile r+]
} -cleanup {
    catch { close $fd }
    cookfs::Unmount $file
} -match glob -error {couldn't open "*": no password specified for decrypting}

test cookfsVfsEncrypt-4.3.2 "Test file encryption, wrong password when using writerchannel" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -password foo -smallfilebuffer 0]
    set checkfile [makeBinFile "TEST" test $file]
    variable fd
} -body {
    $fsid password "bar"
    set fd [open $checkfile r+]
} -cleanup {
    catch { close $fd }
    cookfs::Unmount $file
} -match glob -error {couldn't open "*": failed to verify read data, the decryption password is incorrect or the archive is corrupted}

test cookfsVfsEncrypt-4.4.1 "Test file encryption, no password when using readerchannel" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -password foo -smallfilebuffer 0]
    set checkfile [makeBinFile "TEST" test $file]
} -body {
    $fsid password ""
    set fd [open $checkfile rb]
} -cleanup {
    catch { close $fd }
    cookfs::Unmount $file
} -match glob -error {couldn't open "*": no password specified for decrypting}

test cookfsVfsEncrypt-4.4.2 "Test file encryption, wrong password when using readerchannel" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -password foo -smallfilebuffer 0]
    set checkfile [makeBinFile "TEST" test $file]
} -body {
    $fsid password "bar"
    set fd [open $checkfile rb]
} -cleanup {
    catch { close $fd }
    cookfs::Unmount $file
} -match glob -error {couldn't open "*": failed to verify read data, the decryption password is incorrect or the archive is corrupted}

test cookfsVfsEncrypt-5.1 "Test key-index encryption" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -encryptkey -password foo]
    # this file should be encrypted
    makeFile {TEST00TEST} test0 $file
    $fsid password ""
    # this file should be not encrypted
    makeFile {TEST01TEST} test1 $file
    $fsid password "bar"
    # this file should be encrypted
    makeFile {TEST02TEST} test2 $file
    cookfs::Unmount $file
    variable data
} -body {
    # check how pages were stored to archive
    set data [viewBinFile $file]
    assertNotContain $data "TEST00TEST" "test0 should be encrypted"
    assertContain $data "TEST01TEST" "test1 should be unencrypted"
    assertNotContain $data "TEST02TEST" "test2 should be encrypted"

    # Check how files can be read from archive. The latest password was "bar".
    set fsid [cookfs::Mount $file $file -readonly -password bar]
    assertEq [viewFile test0 $file] "TEST00TEST" "test0: incorrect data"
    assertEq [viewFile test1 $file] "TEST01TEST" "test1: incorrect data"
    # As we have key-based encryption, we have set any password.
    $fsid password "foo"
    assertEq [viewFile test2 $file] "TEST02TEST" "test2: incorrect data"
} -cleanup {
    cookfs::Unmount $file
} -ok

test cookfsVfsEncrypt-5.2.1 "Test key-index encryption, open protected archive without password (readonly mode)" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -encryptkey -password foo]
    makeFile {TEST} test0 $file
    cookfs::Unmount $file
} -body {
    cookfs::Mount $file $file -readonly
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {Unable to create Cookfs object: the required password for the encrypted archive is missing}

test cookfsVfsEncrypt-5.2.2 "Test key-index encryption, open protected archive without password (readwrite mode)" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -encryptkey -password foo]
    makeFile {TEST} test0 $file
    cookfs::Unmount $file
} -body {
    cookfs::Mount $file $file
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {Unable to create Cookfs object: the required password for the encrypted archive is missing}

test cookfsVfsEncrypt-5.3.1 "Test key-index encryption, open protected archive with wrong password (readonly mode)" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -encryptkey -password foo]
    makeFile {TEST} test0 $file
    cookfs::Unmount $file
} -body {
    cookfs::Mount $file $file -readonly -password bar
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {Unable to create Cookfs object: could not decrypt the encryption key with the specified password}

test cookfsVfsEncrypt-5.3.2 "Test key-index encryption, open protected archive with wrong password (readwrite mode)" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -encryptkey -password foo]
    makeFile {TEST} test0 $file
    cookfs::Unmount $file
} -body {
    cookfs::Mount $file $file -password bar
} -cleanup {
    catch { cookfs::Unmount $file }
} -error {Unable to create Cookfs object: could not decrypt the encryption key with the specified password}

test cookfsVfsEncrypt-5.3.3 "Test key-index encryption, open protected archive with wrong password (readwrite mode), ensure that archive is not broken" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -encryptkey -password foo]
    makeFile {TEST} test0 $file
    cookfs::Unmount $file
} -body {
    assertErrMsg { cookfs::Mount $file /fake_mount_point -password bar } {Unable to create Cookfs object: could not decrypt the encryption key with the specified password}
    cookfs::Mount $file $file -password foo
    viewFile test0 $file
} -cleanup {
    cookfs::Unmount $file
    catch { cookfs::Unmount /fake_mount_point }
} -result {TEST}

test cookfsVfsEncrypt-6.1 "Test key encryption" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Do not set a password at initialization to avoid encrypting the indexes
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -encryptkey]
    $fsid password "foo"
    # this file should be encrypted
    makeFile {TEST00TEST} test0 $file
    $fsid password ""
    # this file should be not encrypted
    makeFile {TEST01TEST} test1 $file
    $fsid password "bar"
    # this file should be encrypted
    makeFile {TEST02TEST} test2 $file
    cookfs::Unmount $file
    variable data
} -body {
    # check how pages were stored to archive
    set data [viewBinFile $file]
    assertNotContain $data "TEST00TEST" "test0 should be encrypted"
    assertContain $data "TEST01TEST" "test1 should be unencrypted"
    assertNotContain $data "TEST02TEST" "test2 should be encrypted"

    # Check how files can be read from archive. The latest password was "bar".
    set fsid [cookfs::Mount $file $file -readonly -password bar]
    assertEq [viewFile test0 $file] "TEST00TEST" "test0: incorrect data"
    assertEq [viewFile test1 $file] "TEST01TEST" "test1: incorrect data"
    # As we have key-based encryption, we have set any password.
    $fsid password "foo"
    assertEq [viewFile test2 $file] "TEST02TEST" "test2: incorrect data"
} -cleanup {
    cookfs::Unmount $file
} -ok

test cookfsVfsEncrypt-6.2 "Test key encryption, without password and with wrong password" -constraints {cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Do not set a password at initialization to avoid encrypting the indexes
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0 -encryptkey]
    makeFile {TEST00TEST} test0 $file
    $fsid password "foo"
    makeFile {TEST01TEST} test1 $file
    cookfs::Unmount $file
} -body {
    set fsid [cookfs::Mount $file $file -readonly]
    assertEq [viewFile test0 $file] "TEST00TEST"
    assertErrMsgMatch { viewFile test1 $file } {couldn't open "*": no password specified for decrypting}
    assertErrMsg { $fsid password "bar" } {could not decrypt the encryption key with the specified password}
    $fsid password "foo"
    assertEq [viewFile test1 $file] "TEST01TEST"
} -cleanup {
    cookfs::Unmount $file
} -ok

test cookfsVfsEncrypt-7.1 "Test encryption with aside vfs, vfs unencrypted, aside encrypted" -constraints {cookfsCrypto cookfsAside} -setup {
    set file [makeFile {} pages.cfs]
    set file_aside [makeFile {} aside.cfs]
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0]
    variable data
} -body {
    # this file should be unencrypted
    makeFile {TEST00TEST} test0 $file

    # mount aside vfs
    $fsid aside $file_aside
    # this file should be unencrypted
    makeFile {TEST00ASIDE} aside0 $file
    # set password
    $fsid password "foo"
    # this file should be encrypted
    makeFile {TEST01ASIDE} aside1 $file

    # unmount aside vfs
    $fsid aside ""

    # this file should be not encrypted
    makeFile {TEST01TEST} test1 $file

    # unmount vfs
    cookfs::Unmount $file

    # check how files were stored to archive
    set data [viewBinFile $file]
    assertContain $data "TEST00TEST" "test0 contains encrypted data"
    assertContain $data "TEST01TEST" "test1 contains encrypted data"

    # check how aside pages were stored to archive
    set data [viewBinFile $file_aside]
    assertContain    $data "TEST00ASIDE" "aside0 contains encrypted data"
    assertNotContain $data "TEST01ASIDE" "aside1 contains unencrypted data"

    # Try to read files
    set fsid [cookfs::Mount $file $file -readonly]
    assertEq [viewFile test0 $file] "TEST00TEST" "file0 contains incorrect data"
    assertEq [viewFile test1 $file] "TEST01TEST" "file1 contains incorrect data"

    # Try to read aside files
    $fsid aside $file_aside
    assertEq [viewFile aside0 $file] "TEST00ASIDE" "aside0 contains incorrect data"
    # Check error as we didn't set password for this aside vfs
    assertErrMsgMatch { viewFile aside1 $file } {couldn't open "*": no password specified for decrypting}
    # Set password and ensure we can read the file
    $fsid password "foo"
    assertEq [viewFile aside1 $file] "TEST01ASIDE" "aside1 contains incorrect data"
} -cleanup {
    cookfs::Unmount $file
} -ok

test cookfsVfsEncrypt-7.2 "Test encryption with aside vfs, vfs encrypted, aside unencrypted/encrypted with another password" -constraints {cookfsCrypto cookfsAside} -setup {
    set file [makeFile {} pages.cfs]
    set file_aside [makeFile {} aside.cfs]
    set fsid [cookfs::Mount $file $file -compression none -encryptlevel 0]
    variable data
} -body {
    # set password
    $fsid password "foo"
    # this file should be encrypted
    makeFile {TEST00TEST} test0 $file

    # mount aside vfs and reset password
    $fsid aside $file_aside
    $fsid password ""
    # this file should be not encrypted
    makeFile {TEST00ASIDE} aside0 $file
    $fsid password "bar"
    # this page should be encrypted
    makeFile {TEST01ASIDE} aside1 $file

    # unmount aside vfs
    $fsid aside ""

    # this file should be encrypted
    makeFile {TEST01TEST} test1 $file

    # unmount vfs
    cookfs::Unmount $file

    # check how pages were stored to archive
    set data [viewBinFile $file]
    assertNotContain $data "TEST00TEST" "test0 contains unencrypted data"
    assertNotContain $data "TEST01TEST" "test1 contains unencrypted data"

    # check how aside pages were stored to archive
    set data [viewBinFile $file_aside]
    assertContain    $data "TEST00ASIDE" "aside0 contains encrypted data"
    assertNotContain $data "TEST01ASIDE" "aside1 contains unencrypted data"

    # Try to access vfs without password
    set fsid [cookfs::Mount $file $file -readonly]
    assertErrMsgMatch { viewFile test0 $file } {couldn't open "*": no password specified for decrypting}
    assertErrMsgMatch { viewFile test1 $file } {couldn't open "*": no password specified for decrypting}
    # Try to access/read aside vfs without password
    $fsid aside $file_aside
    assertEq [viewFile aside0 $file] "TEST00ASIDE" "aside0 contains incorrect data"
    assertErrMsgMatch { viewFile aside1 $file } {couldn't open "*": no password specified for decrypting}

    # unmount aside vfs and set password
    $fsid aside ""
    $fsid password "foo"

    # now we should be able to read files
    assertEq [viewFile test0 $file] "TEST00TEST" "file0 contains incorrect data"
    assertEq [viewFile test1 $file] "TEST01TEST" "file1 contains incorrect data"

    # Try to read aside vfs
    $fsid aside $file_aside

    # aside page#0 is unencrypted and should be available
    assertEq [viewFile aside0 $file] "TEST00ASIDE" "aside0 contains incorrect data"
    # however, aside1 is encrypted with other password and should be unavailable
    assertErrMsgMatch { viewFile aside1 $file } {couldn't open "*": failed to verify read data, the decryption password is incorrect or the archive is corrupted}

    # Let's set correct aside password now
    $fsid password "bar"

    # We should be able to read all pages now
    assertEq [viewFile aside0 $file] "TEST00ASIDE" "aside0 contains incorrect data"
    assertEq [viewFile aside1 $file] "TEST01ASIDE" "aside1 contains incorrect data"
    assertEq [viewFile test0 $file] "TEST00TEST" "file0 contains incorrect data"
    # file1 was added when aside vfs was unmounted, thus it is not available while aside vfs is active.
    # We have to unmount aside vfs to be able to read file1.
    $fsid aside ""
    assertEq [viewFile test1 $file] "TEST01TEST" "file1 contains incorrect data"
} -cleanup {
    cookfs::Unmount $file
} -ok

cleanupTests

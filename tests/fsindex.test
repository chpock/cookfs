tcltest::test cookfsFsindex-1.1 "Create empty fsindex" -setup {
} -body {
    set fsidx [cookfs::fsindex]
} -cleanup {
    $fsidx delete
} -returnCodes {ok} -match glob -result {::cookfs::*::fsindexhandle*}

tcltest::test cookfsFsindex-1.2 "Create empty fsindex and create file" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testfile 2 {0 1 2 3 4 5}
    if {[$fsidx list ""] != "testfile"} {
	error "Listing main directory failed: [$fsidx list ""]"
    }
} -cleanup {
    $fsidx delete
} -returnCodes {ok}

tcltest::test cookfsFsindex-1.3 "Create empty fsindex and create directory and files" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir 1
    $fsidx set testfile 2 {0 1 2 3 4 5}
    $fsidx set testdir/otherfile 3 {6 7 8}
    $fsidx set testfile 4 {9 10 11}
    if {[lsort [$fsidx list ""]] != "testdir testfile"} {
	error "Listing main directory failed"
    }
    if {[$fsidx list "testdir"] != "otherfile"} {
	error "Listing testdir directory failed"
    }
    if {[$fsidx get testfile] != {4 11 {9 10 11}} } {
	error "testfile contents differs from expected: [$fsidx get testfile]"
    }
    if {[$fsidx get testdir] != {1} } {
	error "testdir contents differs from expected: [$fsidx get testdir]"
    }
    if {[$fsidx get testdir/otherfile] != {3 8 {6 7 8}} } {
	error "testdir/otherfile contents differs from expected: [$fsidx get testdir/otherfile]"
    }
} -cleanup {
    $fsidx delete
} -returnCodes {ok}

tcltest::test cookfsFsindex-2.1 "Create fsindex based on other fsindex" -setup {
} -body {
    set fsidx [cookfs::fsindex]

    $fsidx set test1 0
    $fsidx set test1/test2 0

    set fsidx2 [cookfs::fsindex [$fsidx export]]
    format %d,%d \
        [string equal [$fsidx export] [$fsidx2 export]] \
        [catch {$fsidx2 get test1/test2}]
} -cleanup {
    $fsidx delete
    $fsidx2 delete
} -returnCodes {ok} -result 1,0

tcltest::test cookfsFsindex-2.2 "Test handling of entries in non-existing paths" -setup {
} -body {
    set fsidx [cookfs::fsindex]

    $fsidx set test1/test2 0
} -cleanup {
    $fsidx delete
} -returnCodes {error} -result {Unable to create entry}

tcltest::test cookfsFsindex-3.1 "Create small number of entries in single directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    for {set i 0} {$i < 10} {incr i} {
	$fsidx set file$i $i [list $i $i $i]
    }
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    for {set i 0} {$i < 10} {incr i} {
	set j [$fsidx get file$i]
	if {([lindex $j 0] != $i) || ([lindex $j 1] != $i)} {
	    error "Invalid value for file $i: $j"
	}
	if {([lindex $j 2 0] != $i) || ([lindex $j 2 1] != $i) || ([lindex $j 2 2] != $i)} {
	    error "Invalid value for file $i: $j"
	}
    }
} -cleanup {
    $fsidx delete
} -returnCodes {ok}

tcltest::test cookfsFsindex-3.2 "Create medium number of entries in single directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    for {set i 0} {$i < 100} {incr i} {
	$fsidx set file$i $i [list $i $i $i]
    }
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    for {set i 0} {$i < 100} {incr i} {
	set j [$fsidx get file$i]
	if {([lindex $j 0] != $i) || ([lindex $j 1] != $i)} {
	    error "Invalid value for file $i: $j"
	}
	if {([lindex $j 2 0] != $i) || ([lindex $j 2 1] != $i) || ([lindex $j 2 2] != $i)} {
	    error "Invalid value for file $i: $j"
	}
    }
} -cleanup {
    $fsidx delete
} -returnCodes {ok}

tcltest::test cookfsFsindex-3.3 "Create large number of entries in single directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    for {set i 0} {$i < 1000} {incr i} {
	$fsidx set file$i $i [list $i $i $i]
    }
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    for {set i 0} {$i < 1000} {incr i} {
	set j [$fsidx get file$i]
	if {([lindex $j 0] != $i) || ([lindex $j 1] != $i)} {
	    error "Invalid value for file $i: $j"
	}
	if {([lindex $j 2 0] != $i) || ([lindex $j 2 1] != $i) || ([lindex $j 2 2] != $i)} {
	    error "Invalid value for file $i: $j"
	}
    }
} -cleanup {
    $fsidx delete
} -returnCodes {ok}

tcltest::test cookfsFsindex-4.1 "Create filename outside iso8859-1 encoding" -setup {
} -body {
    set fn "File\u0105\u4e2d"
    set fsidx [cookfs::fsindex]
    $fsidx set $fn 1
    lindex [$fsidx get $fn] 0
} -cleanup {
    $fsidx delete
} -returnCodes {ok} -result 1

tcltest::test cookfsFsindex-4.2 "Create filename outside iso8859-1 encoding after export/import" -setup {
} -body {
    set fn "File\u0105\u4e2d"
    set fsidx [cookfs::fsindex]
    $fsidx set $fn 1
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    lindex [$fsidx get $fn] 0
} -cleanup {
    $fsidx delete
} -returnCodes {ok} -result 1

tcltest::test cookfsFsindex-5.1 "Test metadata setting" -constraints cookfsMetadata -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx setmetadata test1 t0
    $fsidx setmetadata test2 t2
    $fsidx setmetadata test1 t1
    format %s,%s [$fsidx getmetadata test1] [$fsidx getmetadata test2]
} -cleanup {
    $fsidx delete
} -returnCodes {ok} -result t1,t2

tcltest::test cookfsFsindex-5.2 "Test metadata setting across export/import" -constraints cookfsMetadata -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx setmetadata test1 t0
    $fsidx setmetadata test2 t2
    $fsidx setmetadata test1 t1
    set d [$fsidx export]
    $fsidx delete
    set fh [open /tmp/dump w]; fconfigure $fh -translation binary; puts -nonewline $fh $d ; close $fh
    set fsidx [cookfs::fsindex $d]
    format %s,%s [$fsidx getmetadata test1] [$fsidx getmetadata test2]
} -cleanup {
    $fsidx delete
} -returnCodes {ok} -result t1,t2

tcltest::test cookfsFsindex-6.1 "Test setmtime" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir 1
    $fsidx setmtime testdir 3
    join [$fsidx get testdir] \n
} -cleanup {
    $fsidx delete
} -returnCodes {ok} -result 3

tcltest::test cookfsFsindex-6.1 "Test unset for empty directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir1 1
    $fsidx set testdir2 1
    $fsidx set testdir3 1
    $fsidx unset testdir2
    join [lsort [$fsidx list {}]] ,
} -cleanup {
    $fsidx delete
} -returnCodes {ok} -result testdir1,testdir3

tcltest::test cookfsFsindex-6.2 "Test unset for empty directory after export and import" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir1 1
    $fsidx set testdir2 1
    $fsidx set testdir3 1
    $fsidx unset testdir2
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    join [lsort [$fsidx list {}]] ,
} -cleanup {
    $fsidx delete
} -returnCodes {ok} -result testdir1,testdir3

tcltest::test cookfsFsindex-6.3 "Test unset for file" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir1 1
    $fsidx set testfile2 1 {0 1 2 3 4 5}
    $fsidx set testdir3 1
    $fsidx unset testfile2
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    join [lsort [$fsidx list {}]] ,
} -cleanup {
    $fsidx delete
} -returnCodes {ok} -result testdir1,testdir3

tcltest::test cookfsFsindex-6.4 "Test unset for non-empty directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir1 1
    $fsidx set testdir2 1
    $fsidx set testdir2/testdir4 1
    $fsidx set testdir3 1
    $fsidx unset testdir2
} -cleanup {
    $fsidx delete
} -returnCodes {error} -result {Unable to unset item}


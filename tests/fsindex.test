source [file join [file dirname [info script]] common.tcl]

test cookfsFsindex-1.1 "Create empty fsindex" -constraints {enabledTclCmds} -setup {
    variable fsidx
} -body {
    set fsidx [cookfs::fsindex]
} -cleanup {
    $fsidx delete
} -match glob -result {::cookfs::*::fsindex::handle*}

test cookfsFsindex-1.2 "Create empty fsindex and create file" -constraints {enabledTclCmds} -setup {
    variable fsidx
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testfile 2 {0 1 2 3 4 5}
    assertEq [$fsidx list ""] "testfile" "listing main directory failed"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-1.3 "Create empty fsindex and create directory and files" -constraints {enabledTclCmds} -setup {
    variable fsidx
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir 1
    $fsidx set testfile 2 {0 1 2 3 4 5}
    $fsidx set testdir/otherfile 3 {6 7 8}
    $fsidx set testfile 4 {9 10 11}
    assertEq [lsort [$fsidx list ""]] "testdir testfile" "Listing main directory failed"
    assertEq [$fsidx list "testdir"] "otherfile" "Listing testdir directory failed"
    assertEq [$fsidx get testfile] {4 11 {9 10 11}} "testfile contents differs from expected"
    assertEq [$fsidx get testdir] 1 "testdir contents differs from expected"
    assertEq [$fsidx get testdir/otherfile] {3 8 {6 7 8}} "testdir/otherfile contents differs from expected"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-2.1 "Create fsindex based on other fsindex" -constraints {enabledTclCmds} -setup {
    variable fsidx
    variable fsidx2
} -body {
    set fsidx [cookfs::fsindex]

    $fsidx set test1 0
    $fsidx set test1/test2 0

    set fsidx2 [cookfs::fsindex [$fsidx export]]
    assertBinEq [$fsidx export] [$fsidx2 export]
    $fsidx2 get test1/test2
} -cleanup {
    $fsidx delete
    $fsidx2 delete
} -ok

test cookfsFsindex-2.2 "Test handling of entries in non-existing paths" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set test1/test2 0
} -cleanup {
    $fsidx delete
} -error {Unable to create entry}

test cookfsFsindex-3.1 "Create small number of entries in single directory" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    variable i
    variable j
    variable d
} -body {
    for {set i 0} {$i < 10} {incr i} {
        $fsidx set file$i $i [list $i $i $i]
    }
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    for {set i 0} {$i < 10} {incr i} {
        set j [$fsidx get file$i]
        assertEq [lindex $j 0] $i "invalid mtime for file$i"
        assertEq [lindex $j 1] $i "invalid size for file$i"
        assertEq [lindex $j 2 0] $i "invalid block - page number for file$i"
        assertEq [lindex $j 2 1] $i "invalid block - offset for file$i"
        assertEq [lindex $j 2 2] $i "invalid block - size for file$i"
    }
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-3.2 "Create medium number of entries in single directory" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    variable i
    variable j
    variable d
} -body {
    for {set i 0} {$i < 100} {incr i} {
        $fsidx set file$i $i [list $i $i $i]
    }
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    for {set i 0} {$i < 100} {incr i} {
        set j [$fsidx get file$i]
        assertEq [lindex $j 0] $i "invalid mtime for file$i"
        assertEq [lindex $j 1] $i "invalid size for file$i"
        assertEq [lindex $j 2 0] $i "invalid block - page number for file$i"
        assertEq [lindex $j 2 1] $i "invalid block - offset for file$i"
        assertEq [lindex $j 2 2] $i "invalid block - size for file$i"
    }
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-3.3 "Create large number of entries in single directory" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    variable i
    variable j
    variable d
} -body {
    for {set i 0} {$i < 1000} {incr i} {
        $fsidx set file$i $i [list $i $i $i]
    }
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    for {set i 0} {$i < 1000} {incr i} {
        set j [$fsidx get file$i]
        assertEq [lindex $j 0] $i "invalid mtime for file$i"
        assertEq [lindex $j 1] $i "invalid size for file$i"
        assertEq [lindex $j 2 0] $i "invalid block - page number for file$i"
        assertEq [lindex $j 2 1] $i "invalid block - offset for file$i"
        assertEq [lindex $j 2 2] $i "invalid block - size for file$i"
    }
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-4.1 "Create filename outside iso8859-1 encoding" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    set fn "File\u0105\u4e2d"
} -body {
    $fsidx set $fn 1
    lindex [$fsidx get $fn] 0
} -cleanup {
    $fsidx delete
} -result 1

test cookfsFsindex-4.2 "Create filename outside iso8859-1 encoding after export/import" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    set fn "File\u0105\u4e2d"
    variable d
} -body {
    $fsidx set $fn 1
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    lindex [$fsidx get $fn] 0
} -cleanup {
    $fsidx delete
} -result 1

test cookfsFsindex-5.1 "Test metadata setting" -constraints {cookfsMetadata enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx setmetadata test1 t0
    $fsidx setmetadata test2 t2
    $fsidx setmetadata test1 t1
    assertEq [$fsidx getmetadata test1] "t1" "medatada for time test1"
    assertEq [$fsidx getmetadata test2] "t2" "medatada for time test2"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-5.2 "Test metadata setting across export/import" -constraints {cookfsMetadata enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    variable d
} -body {
    $fsidx setmetadata test1 t0
    $fsidx setmetadata test2 t2
    $fsidx setmetadata test1 t1
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    assertEq [$fsidx getmetadata test1] "t1" "medatada for time test1"
    assertEq [$fsidx getmetadata test2] "t2" "medatada for time test2"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-6.1 "Test setmtime" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set testdir 1
    $fsidx setmtime testdir 3
    join [$fsidx get testdir] \n
} -cleanup {
    $fsidx delete
} -result 3

test cookfsFsindex-6.1 "Test unset for empty directory" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set testdir1 1
    $fsidx set testdir2 1
    $fsidx set testdir3 1
    $fsidx unset testdir2
    assertEq [lsort [$fsidx list {}]] {testdir1 testdir3}
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-6.2 "Test unset for empty directory after export and import" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    variable d
} -body {
    $fsidx set testdir1 1
    $fsidx set testdir2 1
    $fsidx set testdir3 1
    $fsidx unset testdir2
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    assertEq [lsort [$fsidx list {}]] {testdir1 testdir3}
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-6.3 "Test unset for file" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    variable d
} -body {
    $fsidx set testdir1 1
    $fsidx set testfile2 1 {0 1 2 3 4 5}
    $fsidx set testdir3 1
    $fsidx unset testfile2
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    assertEq [lsort [$fsidx list {}]] {testdir1 testdir3}
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-6.4 "Test unset for non-empty directory" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set testdir1 1
    $fsidx set testdir2 1
    $fsidx set testdir2/testdir4 1
    $fsidx set testdir3 1
    $fsidx unset testdir2
} -cleanup {
    $fsidx delete
} -error {Unable to unset item}

test cookfsFsindex-7.1 "Test getblockusage, without arguments" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx getblockusage
} -cleanup {
    $fsidx delete
} -match glob -error {wrong # args: should be "::cookfs::*::fsindex::handle* getblockusage block"}

test cookfsFsindex-7.2 "Test getblockusage, wrong block number" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx getblockusage 0
} -cleanup {
    $fsidx delete
} -result 0

test cookfsFsindex-7.3 "Test getblockusage, after set" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set test1 1
    $fsidx set test2 1 {0 1 2 3 4 5}
    assertEq [$fsidx getblockusage 0] 1 "block #0 is used by test2"
    assertEq [$fsidx getblockusage 1] 0 "block #1 is not used"
    assertEq [$fsidx getblockusage 2] 0 "block #2 is not used"
    assertEq [$fsidx getblockusage 3] 1 "block #3 is used by test2"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-7.4 "Test getblockusage, after set and unset" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set test1 1
    $fsidx set test2 1 {0 1 2 3 4 5}
    $fsidx unset test2
    assertEq [$fsidx getblockusage 0] 0 "block #0 is not used"
    assertEq [$fsidx getblockusage 1] 0 "block #1 is not used"
    assertEq [$fsidx getblockusage 2] 0 "block #2 is not used"
    assertEq [$fsidx getblockusage 3] 0 "block #2 is not used"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-7.5 "Test getblockusage, after set, wrong block number" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set test 1 {0 1 2 3 4 5}
    $fsidx getblockusage 4
} -cleanup {
    $fsidx delete
} -result 0

test cookfsFsindex-7.6 "Test getblockusage, after import" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    variable d
} -body {
    $fsidx set testfile2 1 {0 1 2 3 4 5}
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    assertEq [$fsidx getblockusage 0] 1 "block #0 is used by test2"
    assertEq [$fsidx getblockusage 1] 0 "block #1 is not used"
    assertEq [$fsidx getblockusage 2] 0 "block #2 is not used"
    assertEq [$fsidx getblockusage 3] 1 "block #3 is used by test2"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-7.7 "Test getblockusage, multiple set" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set test1 1 {0 1 2 3 4 5}
    $fsidx set test2 1
    $fsidx set test2/foo 1
    $fsidx set test2/foo/bar 1 {3 4 5}
    $fsidx set test3 1 {2 0 0 3 4 5}
    $fsidx set test4 1 {}
    assertEq [$fsidx getblockusage 0] 1 "block #0 is used by test1"
    assertEq [$fsidx getblockusage 1] 0 "block #1 is not used"
    assertEq [$fsidx getblockusage 2] 1 "block #2 is used by test3"
    assertEq [$fsidx getblockusage 3] 3 "block #3 is used by test1/test3 and test2/foo/bar"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-7.8 "Test getblockusage, multiple set/unset" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set test1 1 {0 1 2 3 4 5}
    $fsidx set test2 1 {3 4 5}
    $fsidx set test3 1
    $fsidx set test3/foo 1 {2 0 0 3 4 5}
    $fsidx set test4 1 {}
    $fsidx set test5 1 {4 0 0}
    $fsidx unset test3/foo
    $fsidx unset test3
    $fsidx set test6 1 {2 0 0}
    assertEq [$fsidx getblockusage 0] 1 "block #0 is used by test1"
    assertEq [$fsidx getblockusage 1] 0 "block #1 is not used"
    assertEq [$fsidx getblockusage 2] 1 "block #2 is used by test6"
    assertEq [$fsidx getblockusage 3] 2 "block #3 is used by test1 and test2"
    assertEq [$fsidx getblockusage 4] 1 "block #4 is test5"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-7.9 "Test getblockusage, set with override" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx set test1 1 {0 1 2 3 4 5}
    $fsidx set test2 1 {3 4 5}
    $fsidx set test1 1 {4 5 6}
    assertEq [$fsidx getblockusage 0] 0 "block #0 is not used"
    assertEq [$fsidx getblockusage 1] 0 "block #1 is not used"
    assertEq [$fsidx getblockusage 2] 0 "block #2 is not used"
    assertEq [$fsidx getblockusage 3] 1 "block #3 is test2"
    assertEq [$fsidx getblockusage 4] 1 "block #4 is test1"
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-8.1 "Test changecount, wrong args" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    $fsidx changecount 1
} -cleanup {
    $fsidx delete
} -match glob -error {wrong # args: should be "::cookfs::*::fsindex::handle* changecount"}

test cookfsFsindex-8.2 "Test changecount, set/unset increments" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    assertEq [$fsidx changecount] 0
    $fsidx set test1 1 {4 5 6}
    assertEq [$fsidx changecount] 1
    $fsidx set test2 1 {3 4 5}
    assertEq [$fsidx changecount] 2
    $fsidx set test3 1
    assertEq [$fsidx changecount] 3
    $fsidx set test3/test1 1 {3 4 5}
    assertEq [$fsidx changecount] 4
    $fsidx unset test3/test1
    assertEq [$fsidx changecount] 5
    $fsidx unset test3
    assertEq [$fsidx changecount] 6
    $fsidx unset test2
    assertEq [$fsidx changecount] 7
    $fsidx unset test1
    assertEq [$fsidx changecount] 8
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-8.3 "Test changecount, set/unset metadata increments" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    assertEq [$fsidx changecount] 0
    $fsidx setmetadata a b
    assertEq [$fsidx changecount] 1
    $fsidx unsetmetadata a
    assertEq [$fsidx changecount] 2
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-8.4 "Test changecount, don't increase the counter on unset errors" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    assertEq [$fsidx changecount] 0
    $fsidx set test3 1
    assertEq [$fsidx changecount] 1
    $fsidx set test3/test1 1 {3 4 5}
    assertEq [$fsidx changecount] 2
    # error here and the change counter should remain the same
    catch { $fsidx unset test3 }
    assertEq [$fsidx changecount] 2
    $fsidx unset test3/test1
    assertEq [$fsidx changecount] 3
    $fsidx unset test3
    assertEq [$fsidx changecount] 4
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-8.5 "Test changecount, reset the change counter on import/export" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
    variable exp
} -body {
    assertEq [$fsidx changecount] 0
    $fsidx set test3 1
    assertEq [$fsidx changecount] 1
    set exp [$fsidx export]
    assertEq [$fsidx changecount] 0
    $fsidx set test1 1
    assertEq [$fsidx changecount] 1
    $fsidx import $exp
    assertEq [$fsidx changecount] 0
    $fsidx set test2 1
    assertEq [$fsidx changecount] 1
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-8.6 "Test changecount, setmtime increment" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    assertEq [$fsidx changecount] 0
    $fsidx set test3 1
    assertEq [$fsidx changecount] 1
    $fsidx setmtime test3 2
    assertEq [$fsidx changecount] 2
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-8.7 "Test changecount, non-incremental operations" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    assertEq [$fsidx changecount] 0
    $fsidx set test3 1 {3 4 5}
    assertEq [$fsidx changecount] 1
    $fsidx setmetadata a b
    assertEq [$fsidx changecount] 2
    $fsidx list ""
    assertEq [$fsidx changecount] 2
    $fsidx get test3
    assertEq [$fsidx changecount] 2
    $fsidx getmtime test3
    assertEq [$fsidx changecount] 2
    $fsidx getmetadata a
    assertEq [$fsidx changecount] 2
    $fsidx getblockusage 3
    assertEq [$fsidx changecount] 2
} -cleanup {
    $fsidx delete
} -ok

test cookfsFsindex-8.8 "Test changecount, don't increment on errors" -constraints {enabledTclCmds} -setup {
    set fsidx [cookfs::fsindex]
} -body {
    assertEq [$fsidx changecount] 0
    $fsidx set test3 1 {3 4 5}
    assertEq [$fsidx changecount] 1
    $fsidx setmetadata a b
    assertEq [$fsidx changecount] 2
    catch { $fsidx list "foo" }
    assertEq [$fsidx changecount] 2
    catch { $fsidx get "bar" }
    assertEq [$fsidx changecount] 2
    catch { $fsidx getmtime "bar" }
    assertEq [$fsidx changecount] 2
    catch { $fsidx getmetadata x }
    assertEq [$fsidx changecount] 2
    catch { $fsidx getblockusage 100 }
    assertEq [$fsidx changecount] 2
    # replace the file with the directory, this should result in an error
    catch { $fsidx set test3 1 }
    assertEq [$fsidx changecount] 2
    # the parent doesn't exist, this should result in an error
    catch { $fsidx set foo/bar 1 {3 4 5} }
    assertEq [$fsidx changecount] 2
    # the parent is not a directory, this should result in an error
    catch { $fsidx set test3/bar 1 {3 4 5} }
    assertEq [$fsidx changecount] 2
} -cleanup {
    $fsidx delete
} -ok

cleanupTests

tcltest::test cookfsFsindex-1.1 "Create empty fsindex" -setup {
} -body {
    set fsidx [cookfs::fsindex]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes {ok} -match glob -result {::cookfs::*::fsindex::handle*}

tcltest::test cookfsFsindex-1.2 "Create empty fsindex and create file" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testfile 2 {0 1 2 3 4 5}
    if {[$fsidx list ""] != "testfile"} {
	error "Listing main directory failed: [$fsidx list ""]"
    }
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes {ok}

tcltest::test cookfsFsindex-1.3 "Create empty fsindex and create directory and files" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir 1
    $fsidx set testfile 2 {0 1 2 3 4 5}
    $fsidx set testdir/otherfile 3 {6 7 8}
    $fsidx set testfile 4 {9 10 11}
    if {[lsort [$fsidx list ""]] != "testdir testfile"} {
	error "Listing main directory failed"
    }
    if {[$fsidx list "testdir"] != "otherfile"} {
	error "Listing testdir directory failed"
    }
    if {[$fsidx get testfile] != {4 11 {9 10 11}} } {
	error "testfile contents differs from expected: [$fsidx get testfile]"
    }
    if {[$fsidx get testdir] != {1} } {
	error "testdir contents differs from expected: [$fsidx get testdir]"
    }
    if {[$fsidx get testdir/otherfile] != {3 8 {6 7 8}} } {
	error "testdir/otherfile contents differs from expected: [$fsidx get testdir/otherfile]"
    }
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes {ok}

tcltest::test cookfsFsindex-2.1 "Create fsindex based on other fsindex" -setup {
} -body {
    set fsidx [cookfs::fsindex]

    $fsidx set test1 0
    $fsidx set test1/test2 0

    set fsidx2 [cookfs::fsindex [$fsidx export]]
    format %d,%d \
        [string equal [$fsidx export] [$fsidx2 export]] \
        [catch {$fsidx2 get test1/test2}]
} -cleanup {
    $fsidx delete
    $fsidx2 delete
    unset -nocomplain fsidx fsidx2
} -returnCodes {ok} -result 1,0

tcltest::test cookfsFsindex-2.2 "Test handling of entries in non-existing paths" -setup {
} -body {
    set fsidx [cookfs::fsindex]

    $fsidx set test1/test2 0
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes {error} -result {Unable to create entry}

tcltest::test cookfsFsindex-3.1 "Create small number of entries in single directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    for {set i 0} {$i < 10} {incr i} {
	$fsidx set file$i $i [list $i $i $i]
    }
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    for {set i 0} {$i < 10} {incr i} {
	set j [$fsidx get file$i]
	if {([lindex $j 0] != $i) || ([lindex $j 1] != $i)} {
	    error "Invalid value for file $i: $j"
	}
	if {([lindex $j 2 0] != $i) || ([lindex $j 2 1] != $i) || ([lindex $j 2 2] != $i)} {
	    error "Invalid value for file $i: $j"
	}
    }
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx i j d
} -returnCodes {ok}

tcltest::test cookfsFsindex-3.2 "Create medium number of entries in single directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    for {set i 0} {$i < 100} {incr i} {
	$fsidx set file$i $i [list $i $i $i]
    }
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    for {set i 0} {$i < 100} {incr i} {
	set j [$fsidx get file$i]
	if {([lindex $j 0] != $i) || ([lindex $j 1] != $i)} {
	    error "Invalid value for file $i: $j"
	}
	if {([lindex $j 2 0] != $i) || ([lindex $j 2 1] != $i) || ([lindex $j 2 2] != $i)} {
	    error "Invalid value for file $i: $j"
	}
    }
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx i j d
} -returnCodes {ok}

tcltest::test cookfsFsindex-3.3 "Create large number of entries in single directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    for {set i 0} {$i < 1000} {incr i} {
	$fsidx set file$i $i [list $i $i $i]
    }
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    for {set i 0} {$i < 1000} {incr i} {
	set j [$fsidx get file$i]
	if {([lindex $j 0] != $i) || ([lindex $j 1] != $i)} {
	    error "Invalid value for file $i: $j"
	}
	if {([lindex $j 2 0] != $i) || ([lindex $j 2 1] != $i) || ([lindex $j 2 2] != $i)} {
	    error "Invalid value for file $i: $j"
	}
    }
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx i j d
} -returnCodes {ok}

tcltest::test cookfsFsindex-4.1 "Create filename outside iso8859-1 encoding" -setup {
} -body {
    set fn "File\u0105\u4e2d"
    set fsidx [cookfs::fsindex]
    $fsidx set $fn 1
    lindex [$fsidx get $fn] 0
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx fn
} -returnCodes {ok} -result 1

tcltest::test cookfsFsindex-4.2 "Create filename outside iso8859-1 encoding after export/import" -setup {
} -body {
    set fn "File\u0105\u4e2d"
    set fsidx [cookfs::fsindex]
    $fsidx set $fn 1
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    lindex [$fsidx get $fn] 0
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx fn d
} -returnCodes {ok} -result 1

tcltest::test cookfsFsindex-5.1 "Test metadata setting" -constraints cookfsMetadata -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx setmetadata test1 t0
    $fsidx setmetadata test2 t2
    $fsidx setmetadata test1 t1
    format %s,%s [$fsidx getmetadata test1] [$fsidx getmetadata test2]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes {ok} -result t1,t2

tcltest::test cookfsFsindex-5.2 "Test metadata setting across export/import" -constraints cookfsMetadata -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx setmetadata test1 t0
    $fsidx setmetadata test2 t2
    $fsidx setmetadata test1 t1
    set d [$fsidx export]
    $fsidx delete
    set fh [open [file join [tcltest::workingDirectory] cookfsFsindex-5.2.tmp] w]; fconfigure $fh -translation binary; puts -nonewline $fh $d ; close $fh
    set fsidx [cookfs::fsindex $d]
    format %s,%s [$fsidx getmetadata test1] [$fsidx getmetadata test2]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx fh d
} -returnCodes {ok} -result t1,t2

tcltest::test cookfsFsindex-6.1 "Test setmtime" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir 1
    $fsidx setmtime testdir 3
    join [$fsidx get testdir] \n
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes {ok} -result 3

tcltest::test cookfsFsindex-6.1 "Test unset for empty directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir1 1
    $fsidx set testdir2 1
    $fsidx set testdir3 1
    $fsidx unset testdir2
    join [lsort [$fsidx list {}]] ,
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes {ok} -result testdir1,testdir3

tcltest::test cookfsFsindex-6.2 "Test unset for empty directory after export and import" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir1 1
    $fsidx set testdir2 1
    $fsidx set testdir3 1
    $fsidx unset testdir2
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    join [lsort [$fsidx list {}]] ,
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx d
} -returnCodes {ok} -result testdir1,testdir3

tcltest::test cookfsFsindex-6.3 "Test unset for file" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir1 1
    $fsidx set testfile2 1 {0 1 2 3 4 5}
    $fsidx set testdir3 1
    $fsidx unset testfile2
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    join [lsort [$fsidx list {}]] ,
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx d
} -returnCodes {ok} -result testdir1,testdir3

tcltest::test cookfsFsindex-6.4 "Test unset for non-empty directory" -setup {
} -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testdir1 1
    $fsidx set testdir2 1
    $fsidx set testdir2/testdir4 1
    $fsidx set testdir3 1
    $fsidx unset testdir2
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes {error} -result {Unable to unset item}

tcltest::test cookfsFsindex-7.1 "Test getblockusage, without arguments" -body {
    set fsidx [cookfs::fsindex]
    $fsidx getblockusage
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes error -match glob -result {wrong # args: should be "::cookfs::*::fsindex::handle* getblockusage block"}

tcltest::test cookfsFsindex-7.2 "Test getblockusage, wrong block number" -body {
    set fsidx [cookfs::fsindex]
    $fsidx getblockusage 0
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -result 0

tcltest::test cookfsFsindex-7.3 "Test getblockusage, after set" -body {
    set fsidx [cookfs::fsindex]
    $fsidx set test1 1
    $fsidx set test2 1 {0 1 2 3 4 5}
    list \
        [$fsidx getblockusage 0] \
        [$fsidx getblockusage 1] \
        [$fsidx getblockusage 2] \
        [$fsidx getblockusage 3]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -result [list 1 0 0 1]

tcltest::test cookfsFsindex-7.4 "Test getblockusage, after set and unset" -body {
    set fsidx [cookfs::fsindex]
    $fsidx set test1 1
    $fsidx set test2 1 {0 1 2 3 4 5}
    $fsidx unset test2
    list \
        [$fsidx getblockusage 0] \
        [$fsidx getblockusage 1] \
        [$fsidx getblockusage 2] \
        [$fsidx getblockusage 3]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -result [list 0 0 0 0]

tcltest::test cookfsFsindex-7.5 "Test getblockusage, after set, wrong block number" -body {
    set fsidx [cookfs::fsindex]
    $fsidx set test 1 {0 1 2 3 4 5}
    $fsidx getblockusage 4
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -result 0

tcltest::test cookfsFsindex-7.6 "Test getblockusage, after import" -body {
    set fsidx [cookfs::fsindex]
    $fsidx set testfile2 1 {0 1 2 3 4 5}
    set d [$fsidx export]
    $fsidx delete
    set fsidx [cookfs::fsindex $d]
    list \
        [$fsidx getblockusage 0] \
        [$fsidx getblockusage 1] \
        [$fsidx getblockusage 2] \
        [$fsidx getblockusage 3]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx d
} -result [list 1 0 0 1]

tcltest::test cookfsFsindex-7.7 "Test getblockusage, multiple set" -body {
    set fsidx [cookfs::fsindex]
    $fsidx set test1 1 {0 1 2 3 4 5}
    $fsidx set test2 1
    $fsidx set test2/foo 1
    $fsidx set test2/foo/bar 1 {3 4 5}
    $fsidx set test3 1 {2 0 0 3 4 5}
    $fsidx set test4 1 {}
    list \
        [$fsidx getblockusage 0] \
        [$fsidx getblockusage 1] \
        [$fsidx getblockusage 2] \
        [$fsidx getblockusage 3]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -result [list 1 0 1 3]

tcltest::test cookfsFsindex-7.8 "Test getblockusage, multiple set/unset" -body {
    set fsidx [cookfs::fsindex]
    $fsidx set test1 1 {0 1 2 3 4 5}
    $fsidx set test2 1 {3 4 5}
    $fsidx set test3 1
    $fsidx set test3/foo 1 {2 0 0 3 4 5}
    $fsidx set test4 1 {}
    $fsidx set test5 1 {4 0 0}
    $fsidx unset test3/foo
    $fsidx unset test3
    $fsidx set test6 1 {2 0 0}
    list \
        [$fsidx getblockusage 0] \
        [$fsidx getblockusage 1] \
        [$fsidx getblockusage 2] \
        [$fsidx getblockusage 3] \
        [$fsidx getblockusage 4]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -result [list 1 0 1 2 1]

tcltest::test cookfsFsindex-7.9 "Test getblockusage, set with override" -body {
    set fsidx [cookfs::fsindex]
    $fsidx set test1 1 {0 1 2 3 4 5}
    $fsidx set test2 1 {3 4 5}
    $fsidx set test1 1 {4 5 6}
    list \
        [$fsidx getblockusage 0] \
        [$fsidx getblockusage 1] \
        [$fsidx getblockusage 2] \
        [$fsidx getblockusage 3] \
        [$fsidx getblockusage 4]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -result [list 0 0 0 1 1]

tcltest::test cookfsFsindex-8.1 "Test changecount, wrong args" -body {
    set fsidx [cookfs::fsindex]
    $fsidx changecount 1
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx
} -returnCodes error -match glob -result {wrong # args: should be "::cookfs::*::fsindex::handle* changecount"}

tcltest::test cookfsFsindex-8.2 "Test changecount, set/unset increments" -body {
    set res [list]
    set fsidx [cookfs::fsindex]
    lappend res [$fsidx changecount]
    $fsidx set test1 1 {4 5 6}
    lappend res [$fsidx changecount]
    $fsidx set test2 1 {3 4 5}
    lappend res [$fsidx changecount]
    $fsidx set test3 1
    lappend res [$fsidx changecount]
    $fsidx set test3/test1 1 {3 4 5}
    lappend res [$fsidx changecount]
    $fsidx unset test3/test1
    lappend res [$fsidx changecount]
    $fsidx unset test3
    lappend res [$fsidx changecount]
    $fsidx unset test2
    lappend res [$fsidx changecount]
    $fsidx unset test1
    lappend res [$fsidx changecount]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx res
} -result {0 1 2 3 4 5 6 7 8}

tcltest::test cookfsFsindex-8.3 "Test changecount, set/unset metadata increments" -body {
    set res [list]
    set fsidx [cookfs::fsindex]
    lappend res [$fsidx changecount]
    $fsidx setmetadata a b
    lappend res [$fsidx changecount]
    $fsidx unsetmetadata a
    lappend res [$fsidx changecount]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx res
} -result {0 1 2}

tcltest::test cookfsFsindex-8.4 "Test changecount, don't increase the counter on unset errors" -body {
    set res [list]
    set fsidx [cookfs::fsindex]
    lappend res [$fsidx changecount]
    $fsidx set test3 1
    lappend res [$fsidx changecount]
    $fsidx set test3/test1 1 {3 4 5}
    lappend res [$fsidx changecount]
    # error here and the change counter should remain the same
    catch { $fsidx unset test3 }
    lappend res [$fsidx changecount]
    $fsidx unset test3/test1
    lappend res [$fsidx changecount]
    $fsidx unset test3
    lappend res [$fsidx changecount]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx res
} -result {0 1 2 2 3 4}

tcltest::test cookfsFsindex-8.5 "Test changecount, reset the change counter on import/export" -body {
    set res [list]
    set fsidx [cookfs::fsindex]
    lappend res [$fsidx changecount]
    $fsidx set test3 1
    lappend res [$fsidx changecount]
    set exp [$fsidx export]
    lappend res [$fsidx changecount]
    $fsidx set test1 1
    lappend res [$fsidx changecount]
    $fsidx import $exp
    lappend res [$fsidx changecount]
    $fsidx set test2 1
    lappend res [$fsidx changecount]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx res exp
} -result {0 1 0 1 0 1}

tcltest::test cookfsFsindex-8.6 "Test changecount, setmtime increment" -body {
    set res [list]
    set fsidx [cookfs::fsindex]
    lappend res [$fsidx changecount]
    $fsidx set test3 1
    lappend res [$fsidx changecount]
    $fsidx setmtime test3 2
    lappend res [$fsidx changecount]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx res
} -result {0 1 2}

tcltest::test cookfsFsindex-8.7 "Test changecount, non-incremental operations" -body {
    set res [list]
    set fsidx [cookfs::fsindex]
    lappend res [$fsidx changecount]
    $fsidx set test3 1 {3 4 5}
    lappend res [$fsidx changecount]
    $fsidx setmetadata a b
    lappend res [$fsidx changecount]
    $fsidx list ""
    lappend res [$fsidx changecount]
    $fsidx get test3
    lappend res [$fsidx changecount]
    $fsidx getmtime test3
    lappend res [$fsidx changecount]
    $fsidx getmetadata a
    lappend res [$fsidx changecount]
    $fsidx getblockusage 3
    lappend res [$fsidx changecount]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx res
} -result {0 1 2 2 2 2 2 2}

tcltest::test cookfsFsindex-8.8 "Test changecount, don't increment on errors" -body {
    set res [list]
    set fsidx [cookfs::fsindex]
    lappend res [$fsidx changecount]
    $fsidx set test3 1 {3 4 5}
    lappend res [$fsidx changecount]
    $fsidx setmetadata a b
    lappend res [$fsidx changecount]
    catch { $fsidx list "foo" }
    lappend res [$fsidx changecount]
    catch { $fsidx get "bar" }
    lappend res [$fsidx changecount]
    catch { $fsidx getmtime "bar" }
    lappend res [$fsidx changecount]
    catch { $fsidx getmetadata x }
    lappend res [$fsidx changecount]
    catch { $fsidx getblockusage 100 }
    lappend res [$fsidx changecount]
    # replace the file with the directory, this should result in an error
    catch { $fsidx set test3 1 }
    lappend res [$fsidx changecount]
    # the parent doesn't exist, this should result in an error
    catch { $fsidx set foo/bar 1 {3 4 5} }
    lappend res [$fsidx changecount]
    # the parent is not a directory, this should result in an error
    catch { $fsidx set test3/bar 1 {3 4 5} }
    lappend res [$fsidx changecount]
} -cleanup {
    $fsidx delete
    unset -nocomplain fsidx res
} -result {0 1 2 2 2 2 2 2 2 2 2}


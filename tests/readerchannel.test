
tcltest::test cookfsReaderChannel-1 {read from multiple pages} -constraints {enabledTclCmds} -setup {
    set vfs  [tcltest::makeFile {} cookfs.cfs]
    # page size is 899 bytes
    vfs::cookfs::Mount -compression none -pagesize 899 -smallfilesize 1 -smallfilebuffer 0 $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    # 4x1000+<newline> = 4001 bytes
    set file [tcltest::makeFile $data test $vfs]
    vfs::unmount $vfs
} -body {
    set pg [cookfs::pages $vfs]
    set fs [cookfs::fsindex [$pg index]]
    set result [list]
    # we expect 4001/900 = 4.4 = 5 pages
    lappend result [$pg length]
    # file size: 4001
    lappend result [lindex [$fs get test] 1]
    # page records = 5*3 = 15
    lappend result [llength [lindex [$fs get test] 2]]
    vfs::cookfs::Mount -readonly $vfs $vfs -pagesobject $pg -fsindexobject $fs
    set fp [open $file r]
    fconfigure $fp -translation binary -encoding binary
    # read the first 1000 bytes
    lappend result [expr { [read $fp 1000] eq [string range $data 0 999] }]
    # read the last 1000 bytes
    seek $fp -1000 end
    lappend result [expr { [read $fp 1000] eq [string range $data end-999 end] }]
    close $fp
    vfs::unmount $vfs
    set result
} -result {5 4001 15 1 1} -cleanup {
    catch { vfs::unmount $vfs }
    file delete -force $vfs
    unset -nocomplain pg fs fp result vfs file data
}

tcltest::test cookfsReaderChannel-2 {full read with multiple pages} -setup {
    set vfs  [tcltest::makeFile {} cookfs.cfs]
    # page size is 899 bytes
    cookfs::Mount -compression none -pagesize 899 -smallfilesize 1 -smallfilebuffer 0 $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    # 4x1000+<newline> = 4001 bytes
    set file [tcltest::makeFile $data test $vfs]
    cookfs::Unmount $vfs
} -body {
    cookfs::Mount -readonly $vfs $vfs
    set result ""
    set fp [open $file r]
    fconfigure $fp -translation binary -encoding binary
    while { ![eof $fp] } {
        append result [read $fp 11]
    }
    close $fp
    cookfs::Unmount $vfs
    list [string length $result] [expr { $result eq $data }]
} -result {4001 1} -cleanup {
    catch { cookfs::Unmount $vfs }
    file delete -force $vfs
    unset -nocomplain result fp vfs file data
}

tcltest::test cookfsReaderChannel-3 {position when reading a file sequentially over several pages} -setup {
    set vfs  [tcltest::makeFile {} cookfs.cfs]
    # page size is 899 bytes
    cookfs::Mount -compression none -pagesize 899 -smallfilesize 1 -smallfilebuffer 0 $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    # 4x1000+<newline> = 4001 bytes
    set file [tcltest::makeFile $data test $vfs]
    cookfs::Unmount $vfs
} -body {
    cookfs::Mount -readonly $vfs $vfs
    set result [list]
    set expected 0
    set fp [open $file r]
    fconfigure $fp -translation binary -encoding binary
    while { ![eof $fp] } {
        read $fp 800
        if { [incr expected 800] > 4001 } { set expected 4001 }
        lappend result "[tell $fp] $expected"
    }
    close $fp
    cookfs::Unmount $vfs
    join $result \n
} -result {800 800
1600 1600
2400 2400
3200 3200
4000 4000
4001 4001} -cleanup {
    catch { cookfs::Unmount $vfs }
    file delete -force $vfs
    unset -nocomplain result expected fp vfs file data
}

tcltest::test cookfsReaderChannel-4 {position when reading a file randomly over several pages} -setup {
    set vfs  [tcltest::makeFile {} cookfs.cfs]
    # page size is 899 bytes
    cookfs::Mount -compression none -pagesize 899 -smallfilesize 1 -smallfilebuffer 0 $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    # 4x1000+<newline> = 4001 bytes
    set file [tcltest::makeFile $data test $vfs]
    cookfs::Unmount $vfs
} -body {
    cookfs::Mount -readonly $vfs $vfs
    set result [list]
    set fp [open $file r]
    fconfigure $fp -translation binary -encoding binary
    foreach { offset size } {
        0    1
        0    10
        0    1500
        10   1
        10   10
        10   1500
        888  1
        888  10
        888  1500
        899  1
        899  10
        899  1500
        4000 1
        4000 10
        4000 1500
    } {
        seek $fp $offset
        set expected [expr { $offset + $size }]
        if { $expected > 4001 } { set expected 4001 }
        set x [read $fp $size]
        lappend result [list $offset $size [expr { $x eq [string range $data $offset [expr { $offset+$size }]-1] }] [tell $fp] $expected]
    }
    close $fp
    cookfs::Unmount $vfs
    join $result \n
} -result {0 1 1 1 1
0 10 1 10 10
0 1500 1 1500 1500
10 1 1 11 11
10 10 1 20 20
10 1500 1 1510 1510
888 1 1 889 889
888 10 1 898 898
888 1500 1 2388 2388
899 1 1 900 900
899 10 1 909 909
899 1500 1 2399 2399
4000 1 1 4001 4001
4000 10 1 4001 4001
4000 1500 1 4001 4001} -cleanup {
    catch { cookfs::Unmount $vfs }
    file delete -force $vfs
    unset vfs file
    unset -nocomplain result expected fp x data
    unset -nocomplain offset size
}

tcltest::test cookfsReaderChannel-5.1 {readable fileevent works for file in pages} -setup {
    set vfs  [tcltest::makeFile {} cookfs.cfs]
    cookfs::Mount $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    set file [tcltest::makeFile $data test $vfs]
    cookfs::Unmount $vfs
} -body {
    set ::result ""
    set ::wait 0
    cookfs::Mount -readonly $vfs $vfs
    set fp [open $file rb]
    fileevent $fp readable [list apply {{ chan } {
        if {[eof $chan]} {
            fileevent $chan readable {}
            set ::wait "eof"
        }
        append ::result [read $chan 1000]
    }} $fp]
    set timer [after 1000 [list set ::wait "timeout"]]
    vwait ::wait
    catch { after cancel $timer }
    close $fp
    cookfs::Unmount $vfs
    list [string equal $::result $::data] $::wait
} -result [list 1 "eof"] -cleanup {
    catch { close $fp }
    catch { cookfs::Unmount $vfs }
    file delete -force $vfs
    catch { after cancel $timer }
    unset -nocomplain vfs data file result fp chan timer wait
}

tcltest::test cookfsReaderChannel-5.2 {readable fileevent works for file in smallfilebuffer} -setup {
    set vfs [tcltest::makeFile {} cookfs.cfs]
    set file [file join $vfs test1]
} -body {
    set ::result ""
    set ::wait 0
    # 4x1000+<newline> = 4001 bytes
    set data "[string repeat "TEST" 1000]\n"
    # ensure that files below 64kb will be stored in the smallfilebuffer
    cookfs::Mount $vfs $vfs -smallfilesize 65536 -smallfilebuffer 65536
    set fp [open $file wb]
    puts -nonewline $fp $data
    close $fp
    set fp [open $file rb]
    fileevent $fp readable [list apply {{ chan } {
        if {[eof $chan]} {
            fileevent $chan readable {}
            set ::wait "eof"
        }
        append ::result [read $chan 1000]
    }} $fp]
    set timer [after 1000 [list set ::wait "timeout"]]
    vwait ::wait
    catch { after cancel $timer }
    close $fp
    cookfs::Unmount $vfs
    list [string equal $::result $::data] $::wait
} -result [list 1 "eof"] -cleanup {
    catch { close $fp }
    catch { cookfs::Unmount $vfs }
    file delete -force $vfs
    catch { after cancel $timer }
    unset -nocomplain vfs data file result fp chan timer wait
}

tcltest::test cookfsReaderChannel-6.1 {channel options for file in pages} -setup {
    set vfs [tcltest::makeFile {} cookfs.cfs]
    cookfs::Mount $vfs $vfs
    set file [tcltest::makeFile {} test $vfs]
    cookfs::Unmount $vfs
} -body {
    # get default channel options for native filesystem, don't use "rb" here
    set fp [open $vfs r]
    set expected [fconfigure $fp]
    close $fp
    cookfs::Mount -readonly $vfs $vfs
    # don't use "rb" here
    set fp [open $file r]
    set actual [fconfigure $fp]
    close $fp
    cookfs::Unmount $vfs
    set result [list]
    foreach opt {-translation -encoding -eofchar} {
        if { [dict get $expected $opt] eq [dict get $actual $opt] } {
            lappend result $opt ok
        } else {
            lappend result $opt "expected: \"[dict get $expected $opt]\" actual: \"[dict get $actual $opt]\""
        }
    }
    set result
} -result [list -translation ok -encoding ok -eofchar ok] -cleanup {
    catch { close $fp }
    catch { cookfs::Unmount $vfs }
    file delete -force $vfs
    unset -nocomplain vfs file fp expected result opt actual
}

tcltest::test cookfsReaderChannel-6.2 {channel options for file in smallfilebuffer} -setup {
    set vfs [tcltest::makeFile {} cookfs.cfs]
    set file [file join $vfs test1]
} -body {
    # get default channel options for native filesystem, don't use "rb" here
    set fp [open $vfs r+]
    set expected [fconfigure $fp]
    close $fp
    set data "123"
    # ensure that files below 64kb will be stored in the smallfilebuffer
    cookfs::Mount $vfs $vfs -smallfilesize 65536 -smallfilebuffer 65536
    set fp [open $file wb]
    puts -nonewline $fp $data
    close $fp
    # don't use "rb" here
    set fp [open $file r]
    set actual [fconfigure $fp]
    close $fp
    cookfs::Unmount $vfs
    set result [list]
    foreach opt {-translation -encoding -eofchar} {
        if { [dict get $expected $opt] eq [dict get $actual $opt] } {
            lappend result $opt ok
        } else {
            lappend result $opt "expected: \"[dict get $expected $opt]\" actual: \"[dict get $actual $opt]\""
        }
    }
    set result
} -result [list -translation ok -encoding ok -eofchar ok] -cleanup {
    catch { close $fp }
    catch { cookfs::Unmount $vfs }
    file delete -force $vfs
    unset -nocomplain vfs file fp data expected result opt actual
}

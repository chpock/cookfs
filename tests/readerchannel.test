source [file join [file dirname [info script]] common.tcl]

test cookfsReaderChannel-1.1 {read from multiple pages} -constraints {enabledTclCmds} -setup {
    set vfs  [makeFile {} cookfs.cfs]
    # page size is 899 bytes
    cookfs::Mount -compression none -pagesize 899 -smallfilesize 1 -smallfilebuffer 0 $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    # 4x1000+<newline> = 4001 bytes
    set file [makeFile $data test $vfs]
    cookfs::Unmount $vfs
    set pg [cookfs::pages $vfs]
    set fs [cookfs::fsindex [$pg index]]
    variable fp
} -body {
    # we expect 4001/900 = 4.4 = 5 pages
    assertEq [$pg length] 5
    # file size: 4001
    assertEq [lindex [$fs get test] 1] 4001
    # page records = 5*3 = 15
    assertEq [llength [lindex [$fs get test] 2]] 15
    cookfs::Mount -readonly $vfs $vfs -pagesobject $pg -fsindexobject $fs
    set fp [open $file rb]
    # read the first 1000 bytes
    assertEq [read $fp 1000] [string range $data 0 999]
    # read the last 1000 bytes
    seek $fp -1000 end
    assertEq [read $fp 1000] [string range $data end-999 end]
} -cleanup {
    cookfs::Unmount $vfs
    catch { close $fp }
} -ok

test cookfsReaderChannel-2.1 {full read with multiple pages} -setup {
    set vfs  [makeFile {} cookfs.cfs]
    # page size is 899 bytes
    cookfs::Mount -compression none -pagesize 899 -smallfilesize 1 -smallfilebuffer 0 $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    # 4x1000+<newline> = 4001 bytes
    set file [makeFile $data test $vfs]
    cookfs::Unmount $vfs
    set result ""
    variable fp
} -body {
    cookfs::Mount -readonly $vfs $vfs
    set fp [open $file rb]
    while { ![eof $fp] } {
        append result [read $fp 11]
    }
    assertEq [string length $result] 4001
    assertEq $result $data
} -cleanup {
    close $fp
    cookfs::Unmount $vfs
} -ok

test cookfsReaderChannel-2.2 {full read with multiple pages, file > 4096 (the default read chunk)} -setup {
    set vfs  [makeFile {} cookfs.cfs]
    # page size is 2.5*4096 = 10240 bytes
    cookfs::Mount -compression none -pagesize 10240 -smallfilesize 1 -smallfilebuffer 0 $vfs $vfs
    # data size is 7*4096 = 28672
    # 10240 bytes on page#0
    # 10240 bytes on page#1
    # 8192  bytes on page#2
    set data [string repeat "TEST123" 4096]
    set file [makeBinFile $data test $vfs]
    cookfs::Unmount $vfs
    set result ""
    variable fp
} -body {
    cookfs::Mount -readonly $vfs $vfs
    set fp [open $file rb]
    set result [read $fp]
    assertEq [string length $result] 28672
    assertEq $result $data
} -cleanup {
    close $fp
    cookfs::Unmount $vfs
} -ok

test cookfsReaderChannel-3.1 {position when reading a file sequentially over several pages} -setup {
    set vfs  [makeFile {} cookfs.cfs]
    # page size is 899 bytes
    cookfs::Mount -compression none -pagesize 899 -smallfilesize 1 -smallfilebuffer 0 $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    # 4x1000+<newline> = 4001 bytes
    set file [makeFile $data test $vfs]
    cookfs::Unmount $vfs
    set expected 0
    variable fp
} -body {
    cookfs::Mount -readonly $vfs $vfs
    set fp [open $file rb]
    while { ![eof $fp] } {
        read $fp 800
        if { [incr expected 800] > 4001 } { set expected 4001 }
        assertEq [tell $fp] $expected
    }
} -cleanup {
    close $fp
    cookfs::Unmount $vfs
} -ok

test cookfsReaderChannel-4.1 {position when reading a file randomly over several pages} -setup {
    set vfs  [makeFile {} cookfs.cfs]
    # page size is 899 bytes
    cookfs::Mount -compression none -pagesize 899 -smallfilesize 1 -smallfilebuffer 0 $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    # 4x1000+<newline> = 4001 bytes
    set file [makeFile $data test $vfs]
    cookfs::Unmount $vfs
    variable fp
    variable expected
    variable offset
    variable size
} -body {
    cookfs::Mount -readonly $vfs $vfs
    set fp [open $file rb]
    foreach { offset size } {
        0    1
        0    10
        0    1500
        10   1
        10   10
        10   1500
        888  1
        888  10
        888  1500
        899  1
        899  10
        899  1500
        4000 1
        4000 10
        4000 1500
    } {
        seek $fp $offset
        set expected [expr { $offset + $size }]
        if { $expected > 4001 } { set expected 4001 }
        assertEq [read $fp $size] [string range $data $offset [expr { $offset+$size }]-1]
        assertEq [tell $fp] $expected
    }
} -cleanup {
    close $fp
    cookfs::Unmount $vfs
} -ok

test cookfsReaderChannel-5.1 {readable fileevent works for file in pages} -setup {
    set vfs  [makeFile {} cookfs.cfs]
    cookfs::Mount $vfs $vfs
    set data "[string repeat "TEST" 1000]\n"
    set file [makeFile $data test $vfs]
    cookfs::Unmount $vfs
    set result {}
    variable fp
    variable wait
    variable timer
} -body {
    cookfs::Mount -readonly $vfs $vfs
    set fp [open $file rb]
    fileevent $fp readable [list apply {{ chan } {
        if {[eof $chan]} {
            fileevent $chan readable {}
            set ::wait "eof"
        }
        append ::result [read $chan 1000]
    }} $fp]
    set timer [after 1000 [list set ::wait "timeout"]]
    vwait wait
    assertEq $result $data
    assertEq $wait "eof"
} -result [list 1 "eof"] -cleanup {
    catch { after cancel $timer }
    close $fp
    cookfs::Unmount $vfs
} -ok

test cookfsReaderChannel-5.2 {readable fileevent works for file in smallfilebuffer} -setup {
    set vfs [makeFile {} cookfs.cfs]
    # ensure that files below 64kb will be stored in the smallfilebuffer
    cookfs::Mount $vfs $vfs -smallfilesize 65536 -smallfilebuffer 65536
    # 4x1000+<newline> = 4001 bytes
    set data "[string repeat "TEST" 1000]\n"
    set file [makeBinFile $data test1 $vfs]
    set result {}
    variable fp
    variable wait
    variable timer
} -body {
    set fp [open $file rb]
    fileevent $fp readable [list apply {{ chan } {
        if {[eof $chan]} {
            fileevent $chan readable {}
            set ::wait "eof"
        }
        append ::result [read $chan 1000]
    }} $fp]
    set timer [after 1000 [list set ::wait "timeout"]]
    vwait ::wait
    assertEq $result $data
    assertEq $wait "eof"
} -cleanup {
    catch { after cancel $timer }
    close $fp
    cookfs::Unmount $vfs
} -ok

test cookfsReaderChannel-6.1 {channel options for file in pages} -setup {
    set vfs [makeFile {} cookfs.cfs]
    cookfs::Mount $vfs $vfs
    set file [makeFile {} test $vfs]
    cookfs::Unmount $vfs
    # get default channel options for native filesystem, don't use "rb" here
    set fp [open $vfs r]
    set expected [fconfigure $fp]
    close $fp
    variable actual
    variable opt
} -body {
    cookfs::Mount -readonly $vfs $vfs
    # don't use "rb" here
    set fp [open $file r]
    set actual [fconfigure $fp]
    foreach opt {-translation -encoding -eofchar} {
        assertEq [dict get $actual $opt] [dict get $expected $opt]
    }
} -cleanup {
    close $fp
    cookfs::Unmount $vfs
} -ok

test cookfsReaderChannel-6.2 {channel options for file in smallfilebuffer} -setup {
    set data "123"
    set vfs [makeFile {} cookfs.cfs]
    set fp [open $vfs r+]
    set expected [fconfigure $fp]
    close $fp
    # ensure that files below 64kb will be stored in the smallfilebuffer
    cookfs::Mount $vfs $vfs -smallfilesize 65536 -smallfilebuffer 65536
    set file [makeBinFile $data test1 $vfs]
    # get default channel options for native filesystem, don't use "rb" here
    variable actual
    variable opt
} -body {
    # don't use "rb" here
    set fp [open $file r]
    set actual [fconfigure $fp]
    foreach opt {-translation -encoding -eofchar} {
        assertEq [dict get $actual $opt] [dict get $expected $opt]
    }
} -cleanup {
    close $fp
    cookfs::Unmount $vfs
} -ok

cleanupTests


tcltest::test cookfsPages-1.1 "Create empty pages as read-write" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {ok} -match glob -result {::cookfs::*::pages::handle*}

tcltest::test cookfsPages-1.2 "Create pages as read-write with existing prefix" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set fh [open $file w]
    fconfigure $fh -translation binary
    puts -nonewline $fh "PrefixTest01"
    close $fh
    set pg [cookfs::pages $file]
    $pg delete
    set fh [open $file r]
    fconfigure $fh -translation binary
    set fc [read $fh 12]
} -cleanup {
    close $fh
    file delete -force $file
    unset -nocomplain file pg fh fc
} -returnCodes {ok} -match glob -result {PrefixTest01}

tcltest::test cookfsPages-1.3 "Create pages as read-write with existing prefix and add page" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set fh [open $file w]
    fconfigure $fh -translation binary
    puts -nonewline $fh "PrefixTest01"
    close $fh
    set pg [cookfs::pages $file]
    $pg add "Test"
    $pg delete
    set fh [open $file r]
    fconfigure $fh -translation binary
    set fc [read $fh 12]
} -cleanup {
    close $fh
    file delete -force $file
    unset -nocomplain file pg fh fc
} -returnCodes {ok} -match glob -result {PrefixTest01}

tcltest::test cookfsPages-1.4 "Create empty pages as read-only" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {Unable to create Cookfs object*}

tcltest::test cookfsPages-1.5 "Check dataoffset command reporting properly for empty files" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    # make sure no additional data is written to file
    set fh [open $file w]
    puts -nonewline $fh ""
    close $fh
} -body {
    set pg [cookfs::pages $file]
    $pg add "Test"
    $pg delete

    set pg [cookfs::pages -readonly $file]
    format %d,%d,%d [$pg dataoffset] [$pg dataoffset 0] [$pg dataoffset 1]
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg fh
} -returnCodes {ok} -result 15,15,20

tcltest::test cookfsPages-1.6 "Check dataoffset command reporting properly for files with prefix" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    # make sure no additional data is written to file
    set fh [open $file w]
    fconfigure $fh -translation binary
    puts -nonewline $fh [string repeat TEST 1024]
    close $fh
} -body {
    set pg [cookfs::pages $file]
    $pg add "Test"
    $pg delete

    set pg [cookfs::pages -readonly $file]
    format %d,%d,%d [$pg dataoffset] [$pg dataoffset 0] [$pg dataoffset 1]
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg fh
} -returnCodes {ok} -result 4111,4111,4116

tcltest::test cookfsPages-1.7 "Check filesize command reporting properly for empty archives" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    # make sure no additional data is written to file
    set fh [open $file w]
    close $fh
} -body {
    set pg [cookfs::pages -compression none $file]
    $pg add [string repeat "Test" 1024]
    $pg filesize
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg fh
    # -result is 4108 - 4096+1 byte for page prefix+15 bytes for stamp
} -returnCodes {ok} -result 4112

tcltest::test cookfsPages-1.8 "Check filesize command reporting properly for files with prefix" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    # make sure no additional data is written to file
    set fh [open $file w]
    fconfigure $fh -translation binary
    puts -nonewline $fh [string repeat TEST 1024]
    close $fh
} -body {
    set pg [cookfs::pages -compression none $file]
    $pg add [string repeat "Test" 1024]
    $pg filesize
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg fh
    # -result is 8208 - 4096+4096+1 byte for page prefix+15 bytes for stamp
} -returnCodes {ok} -result 8208

tcltest::test cookfsPages-2.1 "Test that different pages get different indexes" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg add "TESTx"
    set i0 [$pg add "TEST00"]
    set i1 [$pg add "TEST01"]
    $pg delete
    expr {($i0 == $i1) ? 1 : 0}
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg i0 i1
} -returnCodes {ok} -result 0

tcltest::test cookfsPages-2.2 "Test that same pages get same indexes" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg add "TESTx"
    set i0 [$pg add "TEST00"]
    set i1 [$pg add "TEST00"]
    $pg delete
    expr {($i0 == $i1) ? 1 : 0}
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg i0 i1
} -returnCodes {ok} -result 1

tcltest::test cookfsPages-2.3 "Test that different pages with same MD5 checksum get different indexes" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression none $file]
    $pg add "TESTx"
    # MD5 checksum for both values is 79054025255FB1A26E4BC422AEF54EB4
    set i0 [$pg add [binary format H* d131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f8955ad340609f4b30283e488832571415a085125e8f7cdc99fd91dbdf280373c5bd8823e3156348f5bae6dacd436c919c6dd53e2b487da03fd02396306d248cda0e99f33420f577ee8ce54b67080a80d1ec69821bcb6a8839396f9652b6ff72a70]]
    set i1 [$pg add [binary format H* d131dd02c5e6eec4693d9a0698aff95c2fcab50712467eab4004583eb8fb7f8955ad340609f4b30283e4888325f1415a085125e8f7cdc99fd91dbd7280373c5bd8823e3156348f5bae6dacd436c919c6dd53e23487da03fd02396306d248cda0e99f33420f577ee8ce54b67080280d1ec69821bcb6a8839396f965ab6ff72a70]]
    $pg delete
    expr {($i0 == $i1) ? 1 : 0}
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg i0 i1
} -returnCodes {ok} -result 0

tcltest::test cookfsPages-3.1 "Test correctness of pages after write" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set idxlist {}
} -body {
    set pg [cookfs::pages -compression zlib $file]
    set pages {
        {string repeat TEST 1}
        {string repeat TEST 1024}
        {string repeat TEST 16383}
        {string repeat TEST 16385}
    }
    foreach p $pages {
        lappend idxlist [$pg add [eval $p]]
    }
    $pg delete

    set pg [cookfs::pages -readonly $file]
    foreach p $pages idx $idxlist {
        if {![string equal [$pg get $idx] [eval $p]]} {
            error "Page $idx contains invalid data"
        }
    }
    $pg delete
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg idxlist pages p idx
} -returnCodes {ok}

tcltest::test cookfsPages-3.2 "Test read-only error for adding a page" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression zlib $file]
    set i0 [$pg add T1]
    $pg delete

    set pg [cookfs::pages -readonly $file]
    $pg add T2
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg i0
} -returnCodes {error} -result {Unable to add page}

tcltest::test cookfsPages-3.3 "Test correctness of pages after write - large number of pages" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set idxlist {}
    set conlist {}
} -body {
    set pg [cookfs::pages -compression zlib $file]
    for {set i 0} {$i < 64} {incr i} {
	set contents [string repeat [format PAGE%04d $i] 1024]
	lappend conlist $contents
        lappend idxlist [$pg add $contents]
    }
    $pg delete

    set pg [cookfs::pages -readonly -cachesize 8 $file]
    for {set i 0} {$i < 102400} {incr i} {
	set pr [expr {int(rand() * 64)}]
	set pi [lindex $idxlist $pr]
	set pc [lindex $conlist $pr]
	if {[$pg get $pi] != $pc} {
	    error "Incorrect page contents - iteration $i, page $pr"
	}
    }
    $pg delete
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg idxlist conlist i pr pi pc contents
} -returnCodes {ok}

tcltest::test cookfsPages-3.4 "Test correctness of pages writing with same pages" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set idxlist {}
} -body {
    set pg [cookfs::pages -compression zlib $file]
    set pages {
        {string repeat TEST 1}
        {string repeat TEST 1024}
        {string repeat TEST 16383}
        {string repeat TEST 1024}
        {string repeat TEST 16385}
        {string repeat TEST 16385}
    }
    foreach p $pages {
        lappend idxlist [$pg add [eval $p]]
    }
    $pg delete

    set pg [cookfs::pages -readonly $file]
    foreach p $pages idx $idxlist {
        if {![string equal [$pg get $idx] [eval $p]]} {
            error "Page $idx contains invalid data"
        }
    }
    $pg delete
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg idxlist pages p idx
} -returnCodes {ok}

tcltest::test cookfsPages-4.1 "Test appended file handling" -constraints {cookfsAside enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set file2 [tcltest::makeFile {} pages2.cfs]
} -body {
    set pg [cookfs::pages -compression zlib $file]
    set i0 [$pg add [string repeat "TEST" 64]]
    $pg index "Index1"
    $pg delete
    file stat $file s0

    set pg [cookfs::pages -readonly $file]
    $pg aside $file2
    set i1 [$pg add [string repeat "TEST" 96]]
    $pg index "Index2"
    $pg delete
    file stat $file s1

    if {$s1(size) != $s0(size)} {
        error "Sizes of $file differ"
    }

    set pg [cookfs::pages -readonly $file]
    $pg aside $file2

    if {[$pg index] != "Index2"} {
        error "Index error"
    }

    if {[$pg get $i0] != [string repeat "TEST" 64]} {
        error "Page i0 failed"
    }

    if {[$pg get $i1] != [string repeat "TEST" 96]} {
        error "Page i1 failed"
    }
} -cleanup {
    $pg delete
    file delete -force $file
    file delete -force $file2
    unset -nocomplain file pg file2 i0 i1 s1 s0
} -returnCodes {ok}

tcltest::test cookfsPages-4.2 "Test appended file handling - adding same page to new archive" -constraints {cookfsAside enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set file2 [tcltest::makeFile {} pages2.cfs]
} -body {
    set pg [cookfs::pages -compression zlib $file]
    set i0 [$pg add [string repeat "TEST" 64]]
    $pg index "Index1"
    $pg delete
    file stat $file s0

    set pg [cookfs::pages -readonly $file]
    $pg aside $file2
    set i1 [$pg add [string repeat "TEST" 96]]
    set i2 [$pg add [string repeat "TEST" 64]]
    set i3 [$pg add [string repeat "TEST" 96]]
    set i4 [$pg add [string repeat "TEST" 80]]
    $pg index "Index2"
    $pg delete
    file stat $file s1

    if {$s1(size) != $s0(size)} {
        error "Sizes of $file differ"
    }

    set pg [cookfs::pages -readonly $file]
    $pg aside $file2

    if {[$pg index] != "Index2"} {
        error "Index error"
    }

    if {[$pg get $i0] != [string repeat "TEST" 64]} {
        error "Page i0 failed"
    }

    if {[$pg get $i1] != [string repeat "TEST" 96]} {
        error "Page i1 failed"
    }

    if {$i1 != $i3} {
        error "Page i3 was not matched correctly"
    }

    if {$i2 != $i0} {
        error "Page i2 was created again"
    }

    if {($i0 == $i4) || ($i1 == $i4) || ($i2 == $i4) || ($i3 == $i4)} {
        error "Page i4 was reused"
    }
} -cleanup {
    $pg delete
    file delete -force $file
    file delete -force $file2
    unset -nocomplain file pg file2 i0 i1 i2 i3 i4 s1 s0
} -returnCodes {ok}

tcltest::test cookfsPages-5.1 "Test specifying -endoffset" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression zlib $file]
    set i0 [$pg add [string repeat "TEST" 64]]
    $pg index "Index1"
    $pg delete

    if {[catch {
	set pg [cookfs::pages -readonly $file]
    }]} {
	error ""
    }
    $pg delete

    set size [file size $file]
    set fh [open $file a]
    fconfigure $fh -translation binary
    # add really long suffix that cookfs won't detect
    puts -nonewline $fh [string repeat ".FILE.SUFFIX." 65536]
    close $fh

    if {![catch {
	set pg [cookfs::pages -readonly $file]
    }]} {
	error "Opening a file read-only with data added did not throw an error"
    }

    if {[catch {
	set pg [cookfs::pages -readonly -endoffset $size $file]
    } err]} {
	error "Opening a file with data added and specifying -endoffsert threw an error: $err"
    }

    if {[$pg get $i0] != [string repeat "TEST" 64]} {
	error "Reading page $i0 failed"
    }
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg i0 size fh err
} -returnCodes {ok}

tcltest::test cookfsPages-5.2.1 "Check searching for end of archive if endoffset not specified for small file, 256 bytes of garbage at the end of the file" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    # make sure no additional data is written to file
    set fh [open $file w]
    puts -nonewline $fh ""
    close $fh
} -body {
    set pg [cookfs::pages $file]
    $pg add "Test"
    $pg delete
    set fh [open $file a]
    fconfigure $fh -translation binary
    puts -nonewline $fh [string repeat TEST 64]
    close $fh

    set pg [cookfs::pages -readonly $file]
    $pg dataoffset
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg fh
} -returnCodes {ok} -result 15; # 15 is the size of stamp

tcltest::test cookfsPages-5.2.2 "Check searching for end of archive if endoffset not specified for small file, 65500 bytes of garbage at the end of the file" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    # make sure no additional data is written to file
    set fh [open $file w]
    puts -nonewline $fh ""
    close $fh
} -body {
    set pg [cookfs::pages $file]
    $pg add "Test"
    $pg delete
    set fh [open $file a]
    fconfigure $fh -translation binary
    puts -nonewline $fh [string repeat x 65500]
    close $fh

    set pg [cookfs::pages -readonly $file]
    $pg dataoffset
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg fh
} -returnCodes {ok} -result 15; # 15 is the size of stamp

tcltest::test cookfsPages-5.3.1 "Check searching for end of archive if endoffset not specified for large file, 256 bytes of garbage at the end of the file" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    # make sure no additional data is written to file
    set fh [open $file w]
    puts -nonewline $fh ""
    close $fh
} -body {
    set pg [cookfs::pages -compression none $file]
    $pg add [string repeat "Test" 16384]
    $pg delete
    set fh [open $file a]
    fconfigure $fh -translation binary
    puts -nonewline $fh [string repeat TEST 64]
    close $fh

    set pg [cookfs::pages -readonly $file]
    $pg dataoffset
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg fh
} -returnCodes {ok} -result 15; # 15 is the size of stamp

tcltest::test cookfsPages-5.3.2 "Check searching for end of archive if endoffset not specified for large file, 65500 bytes of garbage at the end of the file" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    # make sure no additional data is written to file
    set fh [open $file w]
    puts -nonewline $fh ""
    close $fh
} -body {
    set pg [cookfs::pages -compression none $file]
    $pg add [string repeat "Test" 16384]
    $pg delete
    set fh [open $file a]
    fconfigure $fh -translation binary
    puts -nonewline $fh [string repeat x 65500]
    close $fh

    set pg [cookfs::pages -readonly $file]
    $pg dataoffset
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg fh
} -returnCodes {ok} -result 15; # 15 is the size of stamp

tcltest::test cookfsPages-6.1 "Test multiple compression algorithms" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression none $file]
    set i0 [$pg add [string repeat "TESTNONE" 2048]]
    $pg index "Index0"
    $pg delete

    set fs0 [file size $file]

    set pg [cookfs::pages -compression zlib $file]
    if {![string equal [$pg get $i0] [string repeat "TESTNONE" 2048]]} {
	error "Incorrect uncompressed page contents after first attempt"
    }

    set i1 [$pg add [string repeat "TESTZLIB" 2048]]
    set i [$pg index]
    if {![string equal $i "Index0"]} {
	error "Incorrect index-$i ([string length $i])"
    }
    $pg index "Index1-$i"
    $pg delete

    set fs1 [file size $file]
    if {($fs1 - $fs0) > 1024} {
	error "Next page not compressed using zlib"
    }

    if {[catch {
	set pg [cookfs::pages -readonly $file]
    }]} {
	error "Unable to read pages after changing compression"
    }

    set i [$pg index]
    if {![string equal $i "Index1-Index0"]} {
	error "Incorrect index-$i ([string length $i])"
    }

    if {![string equal [$pg get $i0] [string repeat "TESTNONE" 2048]]} {
	error "Incorrect uncompressed page contents"
    }

    if {![string equal [$pg get $i1] [string repeat "TESTZLIB" 2048]]} {
	error "Incorrect uncompressed page contents"
    }
} -cleanup {
    $pg delete
    file delete -force $file
    unset -nocomplain file pg i0 fs0 fs1 i i1
} -returnCodes {ok}

tcltest::test cookfsPages-7.1 "Test custom compression algorithm" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    set i0 [$pg add [string repeat "TEST" 1024]]
    $pg delete

    set fh [open $file r]
    fconfigure $fh -translation binary
    set fc [read $fh]
    close $fh

    if {![string match *HEXTEST* $fc]} {
	error "Not used testcompress command"
    }
    set pg [cookfs::pages -readonly -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    if {![string equal [string repeat "TEST" 1024] [$pg get $i0]]} {
	$pg delete
	error "Page contents differs"
    }
    $pg delete
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg i0 fh fc
    testcompresscleanup
} -returnCodes {ok}

tcltest::test cookfsPages-7.2 "Test custom compression algorithm - no decompress command error" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression custom -compresscommand testcompress $file]
    set i0 [$pg add [string repeat "TEST" 1024]]
    $pg delete

    set pg [cookfs::pages -readonly -compression custom -compresscommand testcompress $file]
    $pg get $i0
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg i0
    testcompresscleanup
} -returnCodes {error} -result {Unable to retrieve chunk: No decompresscommand specified}

tcltest::test cookfsPages-7.3 "Test custom compression algorithm - no decompress command error when adding same page" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression custom -compresscommand testcompress $file]
    catch { set i0 [$pg add [string repeat "TEST" 1024]] } err
    set i1 [$pg add [string repeat "TEST" 1024]]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg i0 i1 err
    testcompresscleanup
} -returnCodes {error} -result {No decompresscommand specified}

tcltest::test cookfsPages-7.4 "Test custom compression algorithm not used when size would not be smaller" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    set data {QWERTYUIOPASDFGHJKLZXCVBNM0123456789}
    set i0 [$pg add $data]
    $pg delete

    set fh [open $file r]
    fconfigure $fh -translation binary
    set fc [read $fh]
    close $fh

    if {[string match *HEXTEST* $fc]} {
	error "Used testcompress command"
    }
    set pg [cookfs::pages -readonly -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    if {![string equal $data [$pg get $i0]]} {
	$pg delete
	error "Page contents differs"
    }
    $pg delete
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg data i0 fh fc
    testcompresscleanup
} -returnCodes {ok}

tcltest::test cookfsPages-7.5 "Test custom compression algorithm not used when size would not be smaller with -alwayscompress" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression custom -compresscommand testcompress -decompresscommand testdecompress -alwayscompress $file]
    set data {QWERTYUIOPASDFGHJKLZXCVBNM0123456789}
    set i0 [$pg add $data]
    $pg delete

    set fh [open $file r]
    fconfigure $fh -translation binary
    set fc [read $fh]
    close $fh

    if {![string match *HEXTEST* $fc]} {
	error "Not used testcompress command"
    }
    set pg [cookfs::pages -readonly -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    if {![string equal $data [$pg get $i0]]} {
	$pg delete
	error "Page contents differs"
    }
    $pg delete
} -cleanup {
    file delete -force $file
    unset -nocomplain file pg data i0 fh fc
    testcompresscleanup
} -returnCodes {ok}

tcltest::test cookfsPages-8.1 "Test returning offset to end of file during close without changes" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {TESTTEST} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    set offset [$pg close]
    $pg delete
    expr {[file size $file] == $offset}
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg offset
} -returnCodes {ok} -result 1

tcltest::test cookfsPages-8.2 "Test returning offset to end of file during close with changes" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {TESTTEST} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg add TEST
    set offset [$pg close]
    $pg delete
    expr {[file size $file] == $offset}
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg offset
} -returnCodes {ok} -result 1

tcltest::test cookfsPages-8.3 "Test returning offset to end of file during close without changes when remounting" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {TESTTEST} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg add TEST
    $pg delete

    set pg [cookfs::pages $file]
    set offset [$pg close]
    $pg delete
    expr {[file size $file] == $offset}
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg offset
} -returnCodes {ok} -result 1

tcltest::test cookfsPages-8.4 "Test returning offset when overwriting appended data" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {TESTTEST} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg add TEST
    set offset [$pg close]
    $pg delete

    set fh [open $file a]
    fconfigure $fh -translation binary
    puts -nonewline $fh [string repeat . 1024]
    close $fh

    for {set i 0} {$i < 1024} {incr i} {
        set pg [cookfs::pages -endoffset $offset $file]
        set idx [$pg add TEST$i]
        set offset [$pg close]
        $pg delete
    }

    set pg [cookfs::pages -endoffset $offset $file]
    $pg length
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg fh i offset idx
} -returnCodes {ok} -result 1025

tcltest::test cookfsPages-9.1.1 "Test only changing index information" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {TESTTEST} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg add TEST
    $pg index IDX0
    set offset [$pg close]
    $pg delete

    set pg [cookfs::pages $file]
    $pg index IDX1
    $pg delete

    set pg [cookfs::pages $file]
    $pg index
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg offset
} -returnCodes {ok} -result IDX1

tcltest::test cookfsPages-9.1.2 "Test only changing index information without pages" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {TESTTEST} pages.cfs]
} -body {
    set result [list]

    set pg [cookfs::pages $file]
    $pg index IDX0
    set offset [$pg close]
    $pg delete

    set pg [cookfs::pages $file]
    lappend result [$pg index]
    $pg index IDX1
    $pg delete

    set pg [cookfs::pages $file]
    lappend result [$pg index]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg result offset
} -returnCodes {ok} -result {IDX0 IDX1}

tcltest::test cookfsPages-10.1 "Test crc32 checksum algorithm" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {TESTTEST} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg hash crc32
    set i0 [$pg add TEST]
    set i1 [$pg add TEST]
    expr {$i0 == $i1}
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg i0 i1
} -returnCodes {ok} -result 1

# tcl-pages uses crc32 hash by default unless an md5 package is available.
# In this case, after reopening, hash algorithm remain the same - crc32, and
# this test doesn't catch a failure. Thus, it should be disabled when
# c-pages feature is not enabled or md5 package is not available.
tcltest::test cookfsPages-10.2 "Test crc32 checksum algorithm fail if not re-set" -constraints {
    ([cookfs::pkgconfig get c-pages] || ![catch { package require md5 2 }]) && [cookfs::pkgconfig get tcl-commands]
} -setup {
    set file [tcltest::makeFile {TESTTEST} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg hash crc32
    set i0 [$pg add TEST]

    $pg delete
    set pg [cookfs::pages $file]
    set i1 [$pg add TEST]
    expr {$i0 != $i1}
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg i0 i1
} -returnCodes {ok} -result 1

tcltest::test cookfsPages-10.3 "Test crc32 checksum algorithm after re-reading" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {TESTTEST} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg hash crc32
    set i0 [$pg add TEST]

    $pg delete
    set pg [cookfs::pages $file]
    $pg hash crc32
    set i1 [$pg add TEST]
    expr {$i0 == $i1}
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg i0 i1
} -returnCodes {ok} -result 1

tcltest::test cookfsPages-10.4 "Test crc32 with large chunks" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression custom -compresscommand testcompress $file]
    $pg hash crc32
    set i0 [$pg add [string repeat "TEST" 1024]]
    set i1 [$pg add [string repeat "TEST" 1024]]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg i0 i1
    testcompresscleanup
} -returnCodes {error} -result {No decompresscommand specified}

tcltest::test cookfsPages-11.1 "Test increasing page cache" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set il {}
} -body {
    set pg [cookfs::pages -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    for {set i 0} {$i < 20} {incr i} {
        lappend il $i [$pg add "[string repeat "TEST" 1024][string repeat "TEST" $i]"]
    }
    $pg delete

    set pg [cookfs::pages -compression custom -compresscommand testcompress -decompresscommand testdecompress -cachesize 0 $file]
    $pg cachesize 32
    set ::testdecompresscount 0
    foreach {i idx} $il {
        $pg get $idx
    }
    set ::testdecompresscount
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg il i idx
    testcompresscleanup
} -returnCodes {ok} -result 20

tcltest::test cookfsPages-11.2 "Test decreasing page cache" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set il {}
} -body {
    set pg [cookfs::pages -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    for {set i 0} {$i < 20} {incr i} {
        lappend il $i [$pg add "[string repeat "TEST" 1024][string repeat "TEST" $i]"]
    }
    $pg delete

    set pg [cookfs::pages -compression custom -compresscommand testcompress -decompresscommand testdecompress -cachesize 32 $file]
    $pg cachesize 32
    set ::testdecompresscount 0
    foreach {i idx} $il {
        $pg get $idx
    }
    $pg cachesize 0
    $pg cachesize 32
    set ::testdecompresscount 0
    foreach {i idx} $il {
        $pg get $idx
    }
    set ::testdecompresscount
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg il i idx
    testcompresscleanup
} -returnCodes {ok} -result 20

tcltest::test cookfsPages-12.1 "Test changing page compression" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression zlib $file]
    for {set i 0} {$i < 20} {incr i} {
        lappend il $i [$pg add "[string repeat "TEST" 1024][string repeat "TEST" $i]"]
    }

    $pg compression none

    $pg index [string repeat "INDX" 1024]
    $pg delete

    set fh [open $file r]
    fconfigure $fh -translation binary
    set fc [read $fh]
    close $fh

    if {[string first [string repeat "TEST" 1024] $fc] >= 0} {
        error "Pages not compressed properly"
    }

    if {[string first [string repeat "INDX" 1024] $fc] < 0} {
        error "Index compressed incorrectly"
    }

    set pg [cookfs::pages $file]

    if {![string equal [$pg index] [string repeat "INDX" 1024]]} {
        error "Invalid index after compression change"
    }
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg i il fh fc
} -returnCodes {ok}

tcltest::test cookfsPages-12.2 "Test getting current page compression" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -compression zlib $file]
    if {[$pg compression] != "zlib"} {
	error "Getting initial compression as zlib failed"
    }
    $pg compression none
    if {[$pg compression] != "none"} {
	error "Getting compression as none failed - [$pg compression] returned"
    }

    $pg compression custom
    if {[$pg compression] != "custom"} {
	error "Getting compression as custom failed - [$pg compression] returned"
    }

} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {ok}

tcltest::test cookfsPages-13.1 "Error message when index not found" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {Unable to create Cookfs object: index not found}

tcltest::test cookfsPages-13.2.1 "Error message when invalid signature found" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeBinFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add [string repeat TEST 32]
    $pg delete

    set fh [open $file r]
    fconfigure $fh -translation binary
    set fc [read $fh]
    close $fh

    set fh [open $file w]
    fconfigure $fh -translation binary
    puts -nonewline $fh [string map [list CFS0002 CFSTEST] $fc]
    close $fh
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg fh fc
} -returnCodes {error} -match glob -result {The archive "*" appears to be corrupted or truncated. Expected archive size is 181 bytes or larger.}

tcltest::test cookfsPages-13.2.2 "Error message for truncated file with 100 bytes before archive" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set fp [open $file wb]
    seek $fp 99 start
    puts -nonewline $fp x
    close $fp
    set pg [cookfs::pages -compression none $file]
    $pg add [string repeat x 1024]
    $pg delete

    set fh [open $file rb+]
    chan truncate $fh 128
    close $fh
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg fh fp
} -returnCodes {error} -match glob -result {The archive "*" appears to be corrupted or truncated. Expected archive size is 1177 bytes or larger.}

tcltest::test cookfsPages-13.2.3 "Error message for truncated file with 9MB bytes before archive" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set fp [open $file wb]
    seek $fp [expr { 1024 * 1024 * 9  - 1}] start
    puts -nonewline $fp x
    close $fp
    set pg [cookfs::pages -compression none $file]
    $pg add [string repeat x 1024]
    $pg delete

    set fh [open $file rb+]
    chan truncate $fh [expr { 1024 * 1024 * 9 + 128 }]
    close $fh
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg fp fh
} -returnCodes {error} -match glob -result {The archive "*" appears to be corrupted or truncated. Expected archive size is 9438261 bytes or larger.}

# We are looking for no more than 10 mb, so this test should not find the stamp
# and give a generic "invalid file signature" error message.
tcltest::test cookfsPages-13.2.4 "Error message for truncated file with 10MB bytes before archive" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set fp [open $file wb]
    seek $fp [expr { 1024 * 1024 * 10  - 1}] start
    puts -nonewline $fp x
    close $fp
    set pg [cookfs::pages -compression none $file]
    $pg add [string repeat x 1024]
    $pg delete

    set fh [open $file rb+]
    chan truncate $fh [expr { 1024 * 1024 * 10 + 128 }]
    close $fh
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg fp fh
} -returnCodes {error} -match glob -result {Unable to create Cookfs object: invalid file signature}

tcltest::test cookfsPages-13.2.5 "Error message for truncated file with 1024 bytes before archive, without pages and updated fsindex" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set fp [open $file wb]
    seek $fp 1023 start
    puts -nonewline $fp x
    close $fp
    set pg [cookfs::pages -compression none $file]
    $pg index [string repeat x 1024]
    $pg delete

    set fh [open $file rb+]
    chan truncate $fh [expr { 1024 + 128 }]
    close $fh
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg fp fh
} -returnCodes {error} -match glob -result {The archive "*" appears to be corrupted or truncated. Expected archive size is 2081 bytes or larger.}

tcltest::test cookfsPages-13.3 "Error message when unable to seek to pages" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 1
    $pg add 2
    $pg add 3
    # [file size $file] should not be used here because the page channel
    # may be buffered, and the above pages are not yet written to disk
    set size [$pg filesize]
    $pg delete

    set fh [open $file r]
    fconfigure $fh -translation binary
    set fc [read $fh]
    close $fh

    set fh [open $file w]
    fconfigure $fh -translation binary
    puts -nonewline $fh [string range $fc [expr {$size + 16}] end]
    close $fh
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg size fh fc
} -returnCodes {error} -match glob -result {Unable to create Cookfs object: page sizes not found}

tcltest::test cookfsPages-13.4 "Error message when specifying invalid -endoffset" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 1
    $pg add 2
    $pg add 3
    set size [file size $file]
    $pg delete
} -body {
    set pg [cookfs::pages -readonly -endoffset -1 $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg size
} -returnCodes {error} -match glob -result {Unable to create Cookfs object: index not found}

# TODO: this test should generate same results in Tcl and C version of the library
tcltest::test cookfsPages-13.5 "Error message when specifying directory" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeDirectory pages.cfs]
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {Unable to create Cookfs object: *}

tcltest::test cookfsPages-13.6.1 "Error message when specifying directory and -endoffset" -constraints {unix enabledTclCmds} -setup {
    set file [tcltest::makeDirectory pages.cfs]
} -body {
    set pg [cookfs::pages -endoffset 1 -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {Unable to create Cookfs object: index not found}

tcltest::test cookfsPages-13.6.2 "Error message when specifying directory and -endoffset" -constraints {win enabledTclCmds} -setup {
    set file [tcltest::makeDirectory pages.cfs]
} -body {
    set pg [cookfs::pages -endoffset 1 -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {Unable to create Cookfs object: couldn't open "*": permission denied}

tcltest::test cookfsPages-13.7 "Error message when specifying non-existing file" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    file delete -force $file
} -body {
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {Unable to create Cookfs object: couldn't open "*": no such file or directory}

tcltest::test cookfsPages-13.8.1 "Error message when specifying wrong # arg for 'page get'" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg get 1 2 3 4
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {wrong # args: should be "::cookfs::*::pages::handle* get ?-weight weight? index"}

tcltest::test cookfsPages-13.8.2 "Error message when specifying wrong # arg for 'page get'" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg get 1 2
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {wrong # args: should be "::cookfs::*::pages::handle* get ?-weight weight? index"}

tcltest::test cookfsPages-13.8.3 "Error message when specifying wrong # arg for 'page get'" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg get -weight 2
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {wrong # args: should be "::cookfs::*::pages::handle* get ?-weight weight? index"}

tcltest::test cookfsPages-13.8.4 "Error message when specifying wrong arg format for 'page get'" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg get -weight not-a-num1 1
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -result {expected integer but got "not-a-num1"}

tcltest::test cookfsPages-13.8.5 "Error message when specifying wrong arg format for 'page get'" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg get -weight 1 not-a-num2
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -result {expected integer but got "not-a-num2"}

tcltest::test cookfsPages-13.9.1 "Error message when specifying wrong # args for 'page ticktock'" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg ticktock a b c
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {wrong # args: should be "::cookfs::*::pages::handle* ticktock ?maxAge?"}

tcltest::test cookfsPages-13.9.2 "Error message when specifying wrong arg format for 'page ticktock'" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg ticktock not-a-num3
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -result {expected integer but got "not-a-num3"}

tcltest::test cookfsPages-13.10.1 "Error message when specifying wrong # args for 'page getcache'" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg getcache a b c
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -match glob -result {wrong # args: should be "::cookfs::*::pages::handle* getcache ?index?"}

tcltest::test cookfsPages-13.10.2 "Error message when specifying wrong arg format for 'page getcache'" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg getcache not-a-num4
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -returnCodes {error} -result {expected integer but got "not-a-num4"}

tcltest::test cookfsPages-14.1 "Cache is empty on open" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set pg [cookfs::pages $file]
    $pg getcache
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg
} -result ""

tcltest::test cookfsPages-14.2 "Check that getcache returns a dict value with expected keys" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 0; $pg add 1; $pg add 2; $pg add 3; $pg add 4
    $pg delete
} -body {
    set pg [cookfs::pages -readonly -cachesize 1 $file]
    $pg get 0
    # a delay is here to make sure that there are no background preloads
    after 30

    lmap x [$pg getcache] {
        join [lmap {k v} [lsort -stride 2 -index 0 $x] {
            set k "$k-$v"
        }] { }
    }
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg x k v
} -result {{age-0 index-0 weight-0}}

tcltest::test cookfsPages-14.3 "Cache contains exactly the 2nd page" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 0; $pg add 1; $pg add 2; $pg add 3; $pg add 4
    $pg delete
} -body {
    set pg [cookfs::pages -readonly -cachesize 1 $file]
    $pg get 0
    # a delay is here to make sure that there are no background preloads
    after 30
    $pg get 1
    # a delay is here to make sure that there are no background preloads
    after 30
    lmap x [$pg getcache] { dict get $x index }
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg x
} -result "1"

tcltest::test cookfsPages-14.4 "Cache contains exactly two pages" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 0; $pg add 1; $pg add 2; $pg add 3; $pg add 4
    $pg delete
} -body {
    set pg [cookfs::pages -readonly -cachesize 10 $file]
    $pg get 0
    $pg get 1
    lmap x [$pg getcache] { dict get $x index }
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg x
} -result "1 0"

tcltest::test cookfsPages-14.5 "Cache contains exactly three pages in specific order" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 0; $pg add 1; $pg add 2; $pg add 3; $pg add 4
    $pg delete
} -body {
    set pg [cookfs::pages -readonly -cachesize 3 $file]
    $pg get 0
    $pg get 1
    $pg get 4
    $pg get 0
    # a delay is here to make sure that there are no background preloads
    after 30
    $pg get 3
    lmap x [$pg getcache] { dict get $x index }
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg x
} -result "3 0 4"

tcltest::test cookfsPages-15.1 "Check if the cache weight is stored correctly" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 0; $pg add 1; $pg add 2; $pg add 3; $pg add 4
    $pg delete
} -body {
    set pg [cookfs::pages -readonly -cachesize 4 $file]
    $pg get -weight 5 3
    $pg get -weight 0 1
    $pg get -weight 20 4
    $pg get -weight -5 0
    # a delay is here to make sure that there are no background preloads
    after 30
    # here we override the previous weight 5
    $pg get 3
    lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg x
} -result {{3 0} {0 -5} {4 20} {1 0}}

tcltest::test cookfsPages-15.2 "Check if the cache entry with minimum weight is evicted" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 0; $pg add 1; $pg add 2; $pg add 3; $pg add 4
    $pg delete
} -body {
    set pg [cookfs::pages -readonly -cachesize 4 $file]
    $pg get -weight 5 3
    $pg get -weight 0 1
    $pg get -weight 20 4
    $pg get -weight -5 0
    # a delay is here to make sure that there are no background preloads
    after 30
    # here we override the previous weight 5
    $pg get 3
    unset -nocomplain result
    # at this point, the cache should look like this:
    # {3 0} {0 -5} {4 20} {1 0}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }]
    # get another page
    $pg get 2
    # at this point, the page with weight -5 should be evicted:
    # {2 0} {3 0} {4 20} {1 0}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }]
    # get another page
    $pg get 0
    # at this point, the last page #1 with weight 0 should be evicted:
    # {0 0} {2 0} {3 0} {4 20}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }]
    # get another page. It has a negative weight, but it still needs to be added
    $pg get -weight -100 1
    # at this point, the last page #3 with weight 0 should be evicted:
    # {1 -100} {0 0} {2 0} {4 20}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }]
    # get page which already exists in cache
    $pg get 2
    # at this point, the picture should be similar as before, but now page #2 should be moved to the top:
    # {2 0} {1 -100} {0 0} {4 20}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }]
    # get page which already exists in case, but change its weight
    $pg get -weight 5 0
    # at this point, the picture should be similar as before, but now page #0 must have weight 5 and be moved to the top:
    # {0 5} {2 0} {1 -100} {4 20}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }]
    # get another page
    $pg get 3
    # at this point, the page #1 with weight -100 should be evicted:
    # {3 0} {0 5} {2 0} {4 20}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }]
    # get another page
    $pg get -weight -1 1
    # at this point, the last page with weight 0 (page #2) should be evicted:
    # {1 -1} {3 0} {0 5} {4 20}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }]
    # get another page
    $pg get 2
    # at this point, the most recent page #1 should be evicted as it has the lowest weight -1:
    # {2 0} {3 0} {0 5} {4 20}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x weight] }]
    # let's see what we have
    join $result \n
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg result x
} -result {{3 0} {0 -5} {4 20} {1 0}
{2 0} {3 0} {4 20} {1 0}
{0 0} {2 0} {3 0} {4 20}
{1 -100} {0 0} {2 0} {4 20}
{2 0} {1 -100} {0 0} {4 20}
{0 5} {2 0} {1 -100} {4 20}
{3 0} {0 5} {2 0} {4 20}
{1 -1} {3 0} {0 5} {4 20}
{2 0} {3 0} {0 5} {4 20}}

tcltest::test cookfsPages-16.1 "Check if the cache age is stored correctly" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 0; $pg add 1; $pg add 2; $pg add 3; $pg add 4
    $pg delete
} -body {
    set pg [cookfs::pages -readonly -cachesize 4 $file]
    unset -nocomplain result
    # get one page, its weight will be used later in this test
    $pg get -weight 10 0
    # we have only one page with age 0
    # {0 0}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] }]
    # ticktock
    $pg ticktock
    # age must increase
    # {0 1}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] }]
    # ticktock more
    $pg ticktock
    # age must increase again
    # {0 2}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] }]
    # get another page
    $pg get 1
    # we should see the new page with age 0 and the old one
    # {1 0} {0 2}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] }]
    # just check the current max age
    $pg ticktock -1
    # the cache should be exactly the same
    # {1 0} {0 2}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] }]
    # set the max age setting to 5
    $pg ticktock 5
    # the cache should be exactly the same
    # {1 0} {0 2}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] }]
    # ticktock once more
    $pg ticktock
    # age for 2 entries must increase
    # {1 1} {0 3}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] }]
    # get page
    $pg get 2
    # we have 3 pages now:
    # {2 0} {1 1} {0 3}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] }]
    # ticktock
    $pg ticktock
    # age for all entries must increase
    # {2 1 0} {1 2 0} {0 4 10}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] [dict get $x weight] }]
    # get 2 pages
    $pg get 3
    $pg get 4
    # page #1 with weight 0 should be evicted
    # {4 0 0} {3 0 0} {2 1 0} {0 4 10}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] [dict get $x weight] }]
    # ticktock
    $pg ticktock
    # now page #0 has reached the previously set age limit (5), its weight should be reset to 0:
    # {4 1 0} {3 1 0} {2 2 0} {0 5 0}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] [dict get $x weight] }]
    $pg get 1
    # now page #0 should be evicted as the oldest page:
    # {1 0 0} {4 1 0} {3 1 0} {2 2 0}
    lappend result [lmap x [$pg getcache] { list [dict get $x index] [dict get $x age] [dict get $x weight] }]
    # let's see what we have
    join $result \n
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg result x
} -result {{0 0}
{0 1}
{0 2}
{1 0} {0 2}
{1 0} {0 2}
{1 0} {0 2}
{1 1} {0 3}
{2 0} {1 1} {0 3}
{2 1 0} {1 2 0} {0 4 10}
{4 0 0} {3 0 0} {2 1 0} {0 4 10}
{4 1 0} {3 1 0} {2 2 0} {0 5 0}
{1 0 0} {4 1 0} {3 1 0} {2 2 0}}

tcltest::test cookfsPages-17.1 "Check if cache checking is working properly" -constraints {enabledTclCmds} -setup {
    set file [tcltest::makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    $pg add 0; $pg add 1; $pg add 2; $pg add 3; $pg add 4
    $pg delete
} -body {
    set pg [cookfs::pages -readonly -cachesize 4 $file]
    $pg get 2
    $pg get 4
    unset -nocomplain result
    lappend result [list [$pg getcache 0] [$pg getcache 1] [$pg getcache 2] [$pg getcache 3] [$pg getcache 4]]
    # delete all cache
    $pg cachesize 0
    lappend result [list [$pg getcache 0] [$pg getcache 1] [$pg getcache 2] [$pg getcache 3] [$pg getcache 4]]
    join $result \n
} -cleanup {
    catch {$pg delete}
    file delete -force $file
    unset -nocomplain file pg result
} -result {0 0 1 0 1
0 0 0 0 0}

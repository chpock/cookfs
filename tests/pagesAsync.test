source [file join [file dirname [info script]] common.tcl]

test cookfsPagesAsync-1.1 "Ensure asynccompresscommand is called when no pages are created" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    testasynccompress init 4 {}
    variable pg
} -body {
    set pg [cookfs::pages -alwayscompress -compression custom \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    $pg delete
    set ::testasynccompresscount
} -cleanup {
    catch { $pg delete }
    testasynccleanup
} -result 1

test cookfsPagesAsync-1.2 "Ensure asynccompresscommand finalize is called when no pages are created" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    set ::testasynccompressfinalized 0
    testasynccompress init 4 {}
    variable pg
} -body {
    set pg [cookfs::pages -alwayscompress -compression custom \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    $pg delete
    set ::testasynccompressfinalized
} -cleanup {
    catch { $pg delete }
    testasynccleanup
} -result 1

test cookfsPagesAsync-1.3 "Create single page using async approach" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    testasynccompress init 4 {}
    set pg [cookfs::pages -alwayscompress -compression custom \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
} -body {
    $pg add [string repeat "SAMPLE DATA1" 1024]
    set ::testasynccompresscount
} -cleanup {
    $pg delete
    testasynccleanup
} -result 1

test cookfsPagesAsync-1.4 "Create single page and delete pages object using async approach" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    testasynccompress init 4 {}
    set pg [cookfs::pages -alwayscompress -compression custom \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
} -body {
    $pg add [string repeat "SAMPLE DATA1" 1024]
    $pg delete
    set ::testasynccompresscount
} -cleanup {
    catch { $pg delete }
    testasynccleanup
} -result 2

test cookfsPagesAsync-1.5 "Verify async page can be read" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    testasynccompress init 4 {}
    set pg [cookfs::pages -alwayscompress -compression custom \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
} -body {
    $pg add "SAMPLE DATA SAMPLE DATA SAMPLE DATA"
    $pg delete
    set pg [cookfs::pages -readonly \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    $pg get 0
} -cleanup {
    $pg delete
    testasynccleanup
} -returnCodes {ok} -result "SAMPLE DATA SAMPLE DATA SAMPLE DATA"

test cookfsPagesAsync-1.6 "Verify multiple async pages can be read" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    testasynccompress init 4 {}
    set pg [cookfs::pages -alwayscompress -compression custom \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    set pages {}
    variable i
    variable c
} -body {
    for {set i 0} {$i < 1024} {incr i} {
        set c [string repeat [format "TESTDATA%04d" $i] 4096]
        lappend pages [$pg add $c] $c
    }
    $pg delete
    set pg [cookfs::pages -readonly \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    foreach {i c} $pages {
        assertEq [$pg get $i] $c "Page $i does not match criteria"
    }
    $pg length
} -cleanup {
    $pg delete
    testasynccleanup
} -result 1024

test cookfsPagesAsync-1.7 "Verify multiple async pages with repetitions can be read" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    testasynccompress init 4 {}
    set pg [cookfs::pages -alwayscompress -compression custom \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    set pages {}
    variable i
    variable c
} -body {
    for {set i 0} {$i < 1024} {incr i} {
        set c [string repeat [format "TESTDATA%04d" [expr {$i / 2}]] 4096]
        lappend pages [$pg add $c] $c
    }
    $pg delete
    set pg [cookfs::pages -readonly \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    foreach {i c} $pages {
        assertEq [$pg get $i] $c "Page $i does not match criteria"
    }
    $pg length
} -cleanup {
    $pg delete
    testasynccleanup
} -result 512

test cookfsPagesAsync-2.1 "Test custom async compression algorithm not used when size would not be smaller" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    testasynccompress init 4 {}
    set data {QWERTYUIOPASDFGHJKLZXCVBNM0123456789}
    set pg [cookfs::pages -compression custom \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    variable i0
    variable fh
} -body {
    set i0 [$pg add $data]
    $pg delete

    set fh [open $file rb]
    assertNotContain [read $fh] "HEXTEST" "Used testcompress command"
    close $fh

    set pg [cookfs::pages -readonly -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    assertEq [$pg get $i0] $data "Page contents differs"
} -cleanup {
    $pg delete
    testasynccleanup
} -ok

test cookfsPagesAsync-2.2 "Test custom async compression algorithm used when size would not be smaller with -alwayscompress" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    testasynccompress init 4 {}
    set data {QWERTYUIOPASDFGHJKLZXCVBNM0123456789}
    set pg [cookfs::pages -compression custom -alwayscompress \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    variable i0
    variable fh
} -body {
    set i0 [$pg add $data]
    $pg delete

    set fh [open $file rb]
    assertContain [read $fh] "HEXTEST" "Not used testcompress command"
    close $fh

    set pg [cookfs::pages -readonly -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    assertEq [$pg get $i0] $data "Page contents differs"
} -cleanup {
    $pg delete
    testasynccleanup
} -ok

test cookfsPagesAsync-3.1 "Test correctness of async pages writing with adding same pages" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    testasynccompress init 4 {}
    set idxlist {}
    set pages {
        {string repeat TEST 1}
        {string repeat TEST 1024}
        {string repeat TEST 16383}
        {string repeat TEST 1024}
        {string repeat TEST 16385}
        {string repeat TEST 16385}
    }
    set pg [cookfs::pages -compression custom -alwayscompress \
        -asynccompresscommand testasynccompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    variable p
    variable idx
} -body {
    foreach p $pages {
        lappend idxlist [$pg add [eval $p]]
    }
    $pg delete

    set pg [cookfs::pages -readonly -compression custom -compresscommand testcompress -decompresscommand testdecompress $file]
    foreach p $pages idx $idxlist {
        assertEq [$pg get $idx] [eval $p] "Page $idx contains invalid data"
    }
} -cleanup {
    $pg delete
    testasynccleanup
} -ok

test cookfsPagesAsync-4.1 "Verify async decompression does not call decompress command for subsequent pages" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    set idxlist {}
    testasyncdecompress init 4 {}
    set pg [cookfs::pages -compression custom \
        -alwayscompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    variable i
    variable c
} -body {
    $pg add {HELPER}
    for {set i 0} {$i < 64} {incr i} {
        set c [string repeat [format "TESTCONTENTS%04d" $i] 16]
        lappend idxlist [$pg add $c] $c
    }
    $pg delete

    set pg [cookfs::pages -compression custom \
        -cachesize 5 \
        -alwayscompress \
        -asyncdecompresscommand testasyncdecompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    $pg get 0
    set ::testdecompresscount 0
    foreach {i c} $idxlist {
        assertEq [$pg get $i] $c "Page $i contents does not match"
    }
    set ::testdecompresscount
} -cleanup {
    $pg delete
    testasynccleanup
} -result 0

test cookfsPagesAsync-4.2 "Verify async decompression does not call decompress command for subsequent pages with random return order" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    set idxlist {}
    testasyncdecompress init 4 {}
    set pg [cookfs::pages -compression custom \
        -alwayscompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    variable i
    variable c
} -body {
    $pg add {HELPER}
    for {set i 0} {$i < 64} {incr i} {
        set c [string repeat [format "TESTCONTENTS%04d" $i] 16]
        lappend idxlist [$pg add $c] $c
    }
    $pg delete

    set pg [cookfs::pages -compression custom \
        -cachesize 5 \
        -alwayscompress \
        -asyncdecompresscommand testasyncdecompressrandom \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    $pg get 0
    set ::testdecompresscount 0
    foreach {i c} $idxlist {
        assertEq [$pg get $i] $c "Page $i contents does not match"
    }
    set ::testdecompresscount
} -cleanup {
    $pg delete
    testasynccleanup
} -result 0

test cookfsPagesAsync-4.3 "Verify async decompression does not async decompress multiple times" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    set idxlist {}
    testasyncdecompress init 4 {}
    set pg [cookfs::pages -compression custom \
        -alwayscompress \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    variable i
    variable c
} -body {
    $pg add {HELPER}
    for {set i 0} {$i < 128} {incr i} {
        set c [string repeat [format "TESTCONTENTS%04d" $i] 16]
        lappend idxlist [$pg add $c] $c
    }
    $pg delete

    set pg [cookfs::pages -compression custom \
        -cachesize 10 \
        -alwayscompress \
        -asyncdecompresscommand testasyncdecompressrandom \
        -compresscommand testcompress -decompresscommand testdecompress $file]
    $pg get 0
    set ::testasyncdecompressprocesscount 0
    foreach {i c} $idxlist {
        assertEq [$pg get $i] $c "Page $i contents does not match"
    }
    set ::testasyncdecompressprocesscount
} -cleanup {
    $pg delete
    testasynccleanup
} -result 126

cleanupTests

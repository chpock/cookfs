tcltest::test cookfsPagesAsync-1.1 "Ensure asynccompresscommand is called when no pages are created" -setup {
    set file [tcltest::makeFile {} pages.cfs]
    testasynccompress init 4 {}
} -body {
    set pg [cookfs::pages -alwayscompress -compression custom \
    -asynccompresscommand testasynccompress \
    -compresscommand testcompress -decompresscommand testdecompress $file]
    $pg delete
    set ::testasynccompresscount
} -cleanup {
    catch {$pg delete}
    catch {file delete -force $file}
} -returnCodes {ok} -result 1

tcltest::test cookfsPagesAsync-1.2 "Create single page using async approach" -setup {
    set file [tcltest::makeFile {} pages.cfs]
    testasynccompress init 4 {}
} -body {
    set pg [cookfs::pages -alwayscompress -compression custom \
	-asynccompresscommand testasynccompress \
	-compresscommand testcompress -decompresscommand testdecompress $file]
    $pg add [string repeat "SAMPLE DATA1" 1024]
    set ::testasynccompresscount
} -cleanup {
    catch {$pg delete}
    catch {file delete -force $file}
} -returnCodes {ok} -result 2

tcltest::test cookfsPagesAsync-1.3 "Create single page and delete pages object using async approach" -setup {
    set file [tcltest::makeFile {} pages.cfs]
    testasynccompress init 4 {}
} -body {
    set pg [cookfs::pages -alwayscompress -compression custom \
	-asynccompresscommand testasynccompress \
	-compresscommand testcompress -decompresscommand testdecompress $file]
    $pg add [string repeat "SAMPLE DATA1" 1024]
    $pg delete
    set ::testasynccompresscount
} -cleanup {
    catch {$pg delete}
    catch {file delete -force $file}
} -returnCodes {ok} -result 4

tcltest::test cookfsPagesAsync-1.4 "Verify async page can be read" -setup {
    set file [tcltest::makeFile {} pages.cfs]
    testasynccompress init 4 {}
} -body {
    set pg [cookfs::pages -alwayscompress -compression custom \
	-asynccompresscommand testasynccompress \
	-compresscommand testcompress -decompresscommand testdecompress $file]
    $pg add "SAMPLE DATA SAMPLE DATA SAMPLE DATA"
    $pg delete
    set pg [cookfs::pages -readonly \
	-compresscommand testcompress -decompresscommand testdecompress $file]
    $pg get 0
} -cleanup {
    catch {$pg delete}
    catch {file delete -force $file}
} -returnCodes {ok} -result "SAMPLE DATA SAMPLE DATA SAMPLE DATA"

tcltest::test cookfsPagesAsync-1.5 "Verify multiple async pages can be read" -setup {
    set file [tcltest::makeFile {} pages.cfs]
    testasynccompress init 4 {}
} -body {
    set pg [cookfs::pages -alwayscompress -compression custom \
	-asynccompresscommand testasynccompress \
	-compresscommand testcompress -decompresscommand testdecompress $file]
    for {set i 0} {$i <1024} {incr i} {
	set c [string repeat [format "TESTDATA%04d" $i] 4096]
	$pg add $c
    }
    $pg delete
    set pg [cookfs::pages -readonly \
	-compresscommand testcompress -decompresscommand testdecompress $file]
    for {set i 0} {$i <1024} {incr i} {
	set c [string repeat [format "TESTDATA%04d" $i] 4096]
	if {![string equal [$pg get $i] $c]} {
	    error "Page $i does not match criteria"
	}
    }
    $pg length
} -cleanup {
    catch {$pg delete}
    catch {file delete -force $file}
} -returnCodes {ok} -result 1024

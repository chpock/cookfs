
foreach { cid } { none zlib bz2 lzma } {

    set constraint "cookfsCompression[string totitle $cid]"
    set test_title "cookfsCompr[string totitle $cid]"

    tcltest::test "${test_title}-1" { simple } -constraints $constraint -setup {
        set file [tcltest::makeFile {} cookfs.cfs]
        set dir  [tcltest::makeDirectory test]
        tcltest::makeFile [string repeat "TEST" 1] \
            test1 $dir
        tcltest::makeFile [string repeat "TEST" 10] \
            test2 $dir
        tcltest::makeFile [string repeat "TEST" 100] \
            test3 $dir
        tcltest::makeFile [string repeat "TEST" 1000] \
            test4 $dir
    } -body {
        cookfs::Mount -compression $cid $file $file
        file copy -force $dir [file join $file vfs]
        # remount
        cookfs::Unmount $file
        cookfs::Mount $file $file
        set ok [testIfEqual $dir [file join $file vfs]]
        cookfs::Unmount $file
        set ok
    } -result 1 -cleanup {
        catch { cookfs::Unmount $file }
        file delete -force $file $dir
        unset -nocomplain ok file dir
    }

    tcltest::test "${test_title}-2" {store uncompressed small data} -constraints "$constraint enabledTclCmds" -setup {
        set file [tcltest::makeFile {} cookfs.cfs]
        set dir  [tcltest::makeDirectory test]
        tcltest::makeFile "X" test1 $dir
    } -body {
        cookfs::Mount -compression $cid $file $file
        file copy -force $dir [file join $file vfs]
        # remount
        cookfs::Unmount $file
        cookfs::Mount $file $file
        set ok [testIfEqual $dir [file join $file vfs]]
        cookfs::Unmount $file
        set pg [cookfs::pages $file]
        lappend ok [$pg length]
        # the page '0' contains the 'test1' file only and it must be uncompressed
        # i.e. its size should equal to 3 ( 1 (compression method) + 1 ("X") + 1 (newline) )
        set page_size [expr { [$pg filesize] - [$pg dataoffset 0] }]
        $pg delete
        lappend ok $page_size
    } -result {1 1 3} -cleanup {
        catch { cookfs::Unmount $file }
        catch { $pg delete }
        file delete -force $file $dir
        unset -nocomplain pg page_size ok file dir
    }

    tcltest::test "${test_title}-3" {store uncompressed large data} -constraints "$constraint enabledTclCmds" -setup {
        set file [tcltest::makeFile {} cookfs.cfs]
        set dir  [tcltest::makeDirectory test]
        # 128 bytes of random and high entropy data. Any compression should be inefficient with it.
        set data [binary format H* d131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f8955ad340609f4b30283e488832571415a085125e8f7cdc99fd91dbdf280373c5bd8823e3156348f5bae6dacd436c919c6dd53e2b487da03fd02396306d248cda0e99f33420f577ee8ce54b67080a80d1ec69821bcb6a8839396f9652b6ff72a70]
        # Do not save data with makeFile because it treats the file as a text file.
        # We need to store the data in binary form.
        set file1 [tcltest::makeFile {} test1 $dir]
        # Store the data
        set fp [open $file1 w]
        fconfigure $fp -encoding binary -translation binary
        puts -nonewline $fp $data
        close $fp
    } -body {
        cookfs::Mount -compression $cid $file $file
        file copy -force $dir [file join $file vfs]
        # remount
        cookfs::Unmount $file
        cookfs::Mount $file $file
        set ok [testIfEqual $dir [file join $file vfs]]
        cookfs::Unmount $file
        set pg [cookfs::pages $file]
        lappend ok [$pg length]
        # the page '0' contains the 'test1' file only and it must be uncompressed
        # i.e. its size should equal to 129 ( 1 (compression method) + 128 (data) )
        set page_size [expr { [$pg filesize] - [$pg dataoffset 0] }]
        $pg delete
        lappend ok $page_size
    } -result {1 1 129} -cleanup {
        catch { cookfs::Unmount $file }
        catch { $pg delete }
        file delete -force $file $dir
        unset -nocomplain pg page_size ok file file1 dir fp data
    }

    tcltest::test "${test_title}-4" {store compressed} -constraints "$constraint enabledTclCmds" -setup {
        set file [tcltest::makeFile {} cookfs.cfs]
        set dir  [tcltest::makeDirectory test]
        tcltest::makeFile [string repeat "X" 1024] test1 $dir
    } -body {
        cookfs::Mount -compression $cid $file $file
        file copy -force $dir [file join $file vfs]
        # remount
        cookfs::Unmount $file
        cookfs::Mount $file $file
        set ok [testIfEqual $dir [file join $file vfs]]
        cookfs::Unmount $file
        set pg [cookfs::pages $file]
        lappend ok [$pg length]
        # the page '0' contains the 'test1' file only and it must be compressed (if method is not "none")
        # i.e. its size should be less than 1026 ( 1 (compression method) + 1024 ("XXX...") + 1 (newline) )
        set page_size [expr { [$pg filesize] - [$pg dataoffset 0] }]
        $pg delete
        if { $cid eq "none" } {
            if { $page_size == 1026 } { unset page_size }
        } {
            if { $page_size < 1026 } { unset page_size }
        }
        if { [info exists page_size] } {
            lappend ok "unexpected page size: $page_size"
        }
        set ok
    } -result {1 1} -cleanup {
        catch { cookfs::Unmount $file }
        catch { $pg delete }
        file delete -force $file $dir
        unset -nocomplain pg page_size ok file dir
    }

}
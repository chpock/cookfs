source [file join [file dirname [info script]] common.tcl]

foreach { cid } { none zlib bz2 lzma zstd brotli } {

    set constraint "cookfsCompression[string totitle $cid]"
    set test_title "cookfsCompr[string totitle $cid]"

    test "${test_title}-1" { simple } -constraints $constraint -setup {
        set file [makeFile {} cookfs.cfs]
        set dir  [makeDirectory test]
        makeFile [string repeat "TEST" 1]    test1 $dir
        makeFile [string repeat "TEST" 10]   test2 $dir
        makeFile [string repeat "TEST" 100]  test3 $dir
        makeFile [string repeat "TEST" 1000] test4 $dir
    } -body {
        cookfs::Mount -compression $cid $file $file
        file copy -force $dir [file join $file vfs]
        # remount
        cookfs::Unmount $file
        cookfs::Mount $file $file
        assertTrue [testIfEqual $dir [file join $file vfs]]
    } -cleanup {
        catch { cookfs::Unmount $file }
    } -ok

    test "${test_title}-2" {store uncompressed small data} -constraints "$constraint enabledTclCmds" -setup {
        set file [makeFile {} cookfs.cfs]
        set dir  [makeDirectory test]
        makeFile "X" test1 $dir
        variable pg
    } -body {
        cookfs::Mount -compression $cid $file $file
        file copy -force $dir [file join $file vfs]
        # remount
        cookfs::Unmount $file
        cookfs::Mount $file $file
        assertTrue [testIfEqual $dir [file join $file vfs]]
        cookfs::Unmount $file
        set pg [cookfs::pages $file]
        assertEq [$pg length] 1 "all files must be on a single page"
        # the page '0' contains the 'test1' file only and it must be uncompressed
        # i.e. its size should equal to 2 ( 1 byte ("X") + 1 byte (newline) )
        assertEq [expr { [$pg filesize] - [$pg dataoffset 0] }] 2 "the page size should be 2 bytes"
        $pg delete
    } -cleanup {
        catch { cookfs::Unmount $file }
        catch { $pg delete }
    } -ok

    test "${test_title}-3" {store uncompressed large data} -constraints "$constraint enabledTclCmds" -setup {
        set file [makeFile {} cookfs.cfs]
        set dir  [makeDirectory test]
        # 128 bytes of random and high entropy data. Any compression should be inefficient with it.
        set data [binary format H* d131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f8955ad340609f4b30283e488832571415a085125e8f7cdc99fd91dbdf280373c5bd8823e3156348f5bae6dacd436c919c6dd53e2b487da03fd02396306d248cda0e99f33420f577ee8ce54b67080a80d1ec69821bcb6a8839396f9652b6ff72a70]
        # Do not save data with makeFile because it treats the file as a text file.
        # We need to store the data in binary form.
        set file1 [makeBinFile $data test1 $dir]
        variable pg
    } -body {
        cookfs::Mount -compression $cid $file $file
        file copy -force $dir [file join $file vfs]
        # remount
        cookfs::Unmount $file
        cookfs::Mount $file $file
        assertTrue [testIfEqual $dir [file join $file vfs]]
        cookfs::Unmount $file
        set pg [cookfs::pages $file]
        assertEq [$pg length] 1 "all files must be on a single page"
        # the page '0' contains the 'test1' file only and it must be uncompressed
        # i.e. its size should equal to 128
        assertEq [expr { [$pg filesize] - [$pg dataoffset 0] }] 128 "the page size should be 128 bytes"
    } -cleanup {
        catch { cookfs::Unmount $file }
        catch { $pg delete }
    } -ok

    test "${test_title}-4" {store compressed} -constraints "$constraint enabledTclCmds" -setup {
        set file [makeFile {} cookfs.cfs]
        set dir  [makeDirectory test]
        makeFile [string repeat "X" 1024] test1 $dir
        variable pg
    } -body {
        cookfs::Mount -compression $cid $file $file
        file copy -force $dir [file join $file vfs]
        # remount
        cookfs::Unmount $file
        cookfs::Mount $file $file
        assertTrue [testIfEqual $dir [file join $file vfs]]
        cookfs::Unmount $file
        set pg [cookfs::pages $file]
        assertEq [$pg length] 1 "all files must be on a single page"
        # the page '0' contains the 'test1' file only and it must be compressed (if method is not "none")
        # i.e. its size should be less than 1025 ( 1024 ("XXX...") + 1 (newline) )
        if { $cid eq "none" } {
            assertEq [expr { [$pg filesize] - [$pg dataoffset 0] }] 1025 "the page size should be 128 bytes with 'none' compression"
        } {
            assertLt [expr { [$pg filesize] - [$pg dataoffset 0] }] 1025 "the page size should be less than 128 bytes with compression"
        }
    } -cleanup {
        catch { cookfs::Unmount $file }
        catch { $pg delete }
    } -ok

    test "${test_title}-5.1" {Specify no compression level} -constraints "$constraint enabledTclCmds" -setup {
        set file [makeFile {} cookfs.cfs]
        variable pg
    } -body {
        set pg [cookfs::pages -compression "${cid}" $file]
    } -cleanup {
        catch { $pg delete }
    } -match glob -result {::cookfs::*::pages::handle*}

    test "${test_title}-5.2" {Specify empty compression level} -constraints "$constraint enabledTclCmds" -setup {
        set file [makeFile {} cookfs.cfs]
        variable pg
    } -body {
        set pg [cookfs::pages -compression "${cid}:" $file]
    } -cleanup {
        catch { $pg delete }
    } -match glob -result {::cookfs::*::pages::handle*}

    test "${test_title}-5.3" {Specify wrong compression level} -constraints "$constraint enabledTclCmds" -setup {
        set file [makeFile {} cookfs.cfs]
        variable pg
    } -body {
        set pg [cookfs::pages -compression "${cid}:a" $file]
    } -cleanup {
        catch { $pg delete }
    } -error {expected integer but got "a"}

    test "${test_title}-5.4" {Specify negative compression level} -constraints "$constraint enabledTclCmds" -setup {
        set file [makeFile {} cookfs.cfs]
        variable pg
    } -body {
        set pg [cookfs::pages -compression "${cid}:-2" $file]
    } -cleanup {
        catch { $pg delete }
    } -error {the compression level is expected to be an integer between -1 and 255, but got "-2"}

    test "${test_title}-5.5" {Specify overflow compression level} -constraints "$constraint enabledTclCmds" -setup {
        set file [makeFile {} cookfs.cfs]
        variable pg
    } -body {
        set pg [cookfs::pages -compression "${cid}:256" $file]
    } -cleanup {
        catch { $pg delete }
    } -error {the compression level is expected to be an integer between -1 and 255, but got "256"}

    test "${test_title}-6.1" {Test compression levels, pages} -constraints "$constraint enabledTclCmds enabledCPages" -setup {
        set file [makeFile {} cookfs.cfs]
        set data [makeRandomText]
        set expected [dict get {
            none   {1310721 1310721 1310721 1310721 1310721}
            zlib   {335800 395824 365352 342149 330138}
            zstd   {330320 357953 330320 319774 305177}
            brotli {298917 400105 336873 301259 295248}
            bz2    {275040 293158 278822 280149 275041}
            lzma   {274786 311427 303548 274786 272873}
        } $cid]
        set result [list]
        variable i
        variable pg
    } -body {
        set pg [cookfs::pages -compression "$cid" $file]
        $pg add 0$data
        $pg compression "${cid}:0"
        $pg add 1$data
        $pg compression "${cid}:3"
        $pg add 2$data
        $pg compression "${cid}:5"
        $pg add 3$data
        $pg compression "${cid}:9"
        $pg add 4$data
        assertEq [$pg length] 5 "5 pages should be created for each compression type"
        for { set i 0 } { $i < [$pg length] } { incr i } {
            if { $i == [expr { [$pg length] - 1 }] } {
                lappend result [expr { [$pg filesize] - [$pg dataoffset $i] }]
            } else {
                lappend result [expr { [$pg dataoffset [expr { $i + 1 }]] - [$pg dataoffset $i] }]
            }
        }
        assertEq $result $expected "check expected compressed size"
    } -cleanup {
        catch { $pg delete }
    } -ok

    test "${test_title}-6.2" {Test compression levels, VFS} -constraints "$constraint enabledTclCmds enabledCPages" -setup {
        set file [makeFile {} cookfs.cfs]
        set data [makeRandomText]
        set expected [dict get {
            none   {1310721 1310721}
            zlib   {335800 342149}
            zstd   {330320 319774}
            brotli {298917 301259}
            bz2    {275040 280149}
            lzma   {274786 274786}
        } $cid]
        set result [list]
        variable fsid
        variable i
        variable pg
    } -body {
        set fsid [cookfs::Mount $file $file -compression "$cid" -pagesize 0x1000000 -smallfilebuffer 0]
        makeBinFile "0$data" 1 $file
        $fsid compression "${cid}:5"
        makeBinFile "3$data" 2 $file
        set pg [$fsid getpages]
        assertEq [$pg length] 2 "we expect 2 pages to be created"
        for { set i 0 } { $i < [$pg length] } { incr i } {
            if { $i == [expr { [$pg length] - 1 }] } {
                lappend result [expr { [$pg filesize] - [$pg dataoffset $i] }]
            } else {
                lappend result [expr { [$pg dataoffset [expr { $i + 1 }]] - [$pg dataoffset $i] }]
            }
        }
        assertEq $result $expected "check expected compressed size"
    } -cleanup {
        catch { cookfs::Unmount $file }
    } -ok

}

cleanupTests

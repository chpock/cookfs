tcltest::test cookfsDedup-1.1 "Large file deduplication" -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set datas [randomDatas 4 8192]
    set c [vfs::cookfs::Mount $file $file -compression none \
        -pagesize 4096 -smallfilesize 1024]
    set i 0
    foreach d [concat $datas $datas [lrange $datas 2 14] [lrange $datas 7 15]] {
        set fh [open $file/d[incr i] w]
        fconfigure $fh -translation binary
        puts -nonewline $fh $d
        close $fh
    }
    vfs::unmount $file
    set fs [file size $file]
    expr {($fs > (2048 * 16)) && ($fs < (24 * 2048))}
} -cleanup {
    catch {vfs::unmount $file}
    tcltest::removeFile $file
} -result 1

tcltest::test cookfsDedup-1.2 "Small file deduplication for same resulting pages" -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set datas [randomDatas 16 2048]
    set c [vfs::cookfs::Mount $file $file -compression none \
        -pagesize 16384 -smallfilesize 16384 -smallfilebuffer 16384]
    set i 0
    foreach d [concat $datas $datas $datas $datas] {
        set fh [open $file/d[format "%02i" [incr i]] w]
        fconfigure $fh -translation binary
        puts -nonewline $fh $d
        close $fh
    }
    vfs::unmount $file
    set fs [file size $file]
    expr {($fs > (2048 * 16)) && ($fs < (24 * 2048))}
} -cleanup {
    catch {vfs::unmount $file}
    tcltest::removeFile $file
} -result 1

tcltest::test cookfsDedup-1.3 "Small file deduplication for different resulting pages" -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set datas [randomDatas 4 2048]
    set c [vfs::cookfs::Mount $file $file -compression none \
        -pagesize 4096 -smallfilesize 4096 -smallfilebuffer 16384]
    # datas is 4 files of 2048 bytes each
    # page has 4096 bytes
    # file1 contains datas#0 comes to page#0[0]
    # file2 contains datas#1 comes to page#0[1] - flush page now
    # file3 contains datas#2 comes to page#1[0]
    # file4 contains datas#0 uses page#0[0]
    # file5 contains datas#3 comes to page#1[1] - flush page now
    set files [list \
        file1 [lindex $datas 0] \
        file2 [lindex $datas 1] \
        file3 [lindex $datas 2] \
        file4 [lindex $datas 0] \
        file5 [lindex $datas 3] \
    ]
    foreach { f d } $files {
        set fh [open $file/$f w]
        fconfigure $fh -translation binary
        puts -nonewline $fh $d
        close $fh
    }
    vfs::unmount $file
    set fs [file size $file]
    set result [list]
    # the file size should be (2 pages + internal data) and less than (3 pages)
    lappend result [expr {($fs > (4096 * 2)) && ($fs < (4096 * 3))}]
    set c [vfs::cookfs::Mount -readonly $file $file]
    foreach { f d } $files {
        lappend result "$f [[$c getindex] get $f] [string equal $d [read [set fh [open $file/$f rb]]][close $fh]]"
    }
    join $result \n
} -cleanup {
    catch {vfs::unmount $file}
    tcltest::removeFile $file
} -match glob -result {1
file1 * 2048 {0 0 2048} 1
file2 * 2048 {0 2048 2048} 1
file3 * 2048 {1 0 2048} 1
file4 * 2048 {0 0 2048} 1
file5 * 2048 {1 2048 2048} 1}

tcltest::test cookfsDedup-1.4 "Small file deduplication for different resulting pages" -setup {
    set file [tcltest::makeFile {} pages.cfs]
} -body {
    set datas [randomDatas 3 2048]
    set c [vfs::cookfs::Mount $file $file -compression none \
        -pagesize 4096 -smallfilesize 4096 -smallfilebuffer 8192]
    # datas is 3 files of 2048 bytes each
    # page has 4096 bytes
    # file1 contains datas#0 comes to page#0[0]
    # file2 contains datas#1 comes to page#0[1] - flush page now
    # file3 contains datas#1 uses page#0[1]
    # file4 contains datas#1 uses page#0[1] - the buffer size of the small file
    #                                          has reached the limit and should be flushed.
    #                                          But only 1 page should be used for all 4 files.
    # file5 contains datas#0
    # file6 contains datas#1 - flush page now, but it appears the same page as #0,
    #                           so no new pages need to be created.
    # file7 contains data#1 uses page#0[1]
    # file8 contains data#2 uses page#1[0] - unmount now and flush page#1, even if it's not filled
    set files [list \
        file1 [lindex $datas 0] \
        file2 [lindex $datas 1] \
        file3 [lindex $datas 1] \
        file4 [lindex $datas 1] \
        file5 [lindex $datas 0] \
        file6 [lindex $datas 1] \
        file7 [lindex $datas 1] \
        file8 [lindex $datas 2] \
    ]
    foreach { f d } $files {
        set fh [open $file/$f w]
        fconfigure $fh -translation binary
        puts -nonewline $fh $d
        close $fh
    }
    vfs::unmount $file
    set fs [file size $file]
    set result [list]
    # the file size should be (1.5 pages + internal data) and less than (2 pages)
    lappend result [expr {($fs > (1.5 * 4096)) && ($fs < (4096 * 2))}]
    set c [vfs::cookfs::Mount -readonly $file $file]
    foreach { f d } $files {
        lappend result "$f [[$c getindex] get $f] [string equal $d [read [set fh [open $file/$f rb]]][close $fh]]"
    }
    join $result \n
} -cleanup {
    catch {vfs::unmount $file}
    tcltest::removeFile $file
} -match glob -result {1
file1 * 2048 {0 0 2048} 1
file2 * 2048 {0 2048 2048} 1
file3 * 2048 {0 2048 2048} 1
file4 * 2048 {0 2048 2048} 1
file5 * 2048 {0 0 2048} 1
file6 * 2048 {0 2048 2048} 1
file7 * 2048 {0 2048 2048} 1
file8 * 2048 {1 0 2048} 1}


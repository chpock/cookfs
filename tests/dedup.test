source [file join [file dirname [info script]] common.tcl]

test cookfsDedup-1.1 "Large file deduplication" -setup {
    set file [makeFile {} pages.cfs]
    set datas [randomDatas 4 8192]
    variable d
    variable i 0
} -body {
    cookfs::Mount $file $file -compression none -pagesize 4096 -smallfilesize 1024
    foreach d [concat $datas $datas [lrange $datas 2 14] [lrange $datas 7 15]] {
        makeBinFile $d "d[incr i]" $file
    }
    cookfs::Unmount $file
    assertBetween [file size $file] { 2048 * 16 } { 2048 * 24 }
} -cleanup {
    catch {cookfs::Unmount $file}
} -ok

test cookfsDedup-1.2 "Small file deduplication for same resulting pages" -setup {
    set file [makeFile {} pages.cfs]
    set datas [randomDatas 16 2048]
    variable d
    variable i 0
} -body {
    cookfs::Mount $file $file -compression none \
        -pagesize 16384 -smallfilesize 16384 -smallfilebuffer 16384
    foreach d [concat $datas $datas $datas $datas] {
        makeBinFile $d "d[format "%02i" [incr i]]" $file
    }
    cookfs::Unmount $file
    assertBetween [file size $file] { 2048 * 16 } { 2048 * 24 }
} -cleanup {
    catch {cookfs::Unmount $file}
} -ok

test cookfsDedup-1.3 "Small file deduplication for different resulting pages" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    # datas is 4 files of 2048 bytes each
    set datas [randomDatas 4 2048]
    # page has 4096 bytes
    # file1 contains datas#0 comes to page#0[0]
    # file2 contains datas#1 comes to page#0[1] - flush page now
    # file3 contains datas#2 comes to page#1[0]
    # file4 contains datas#0 uses page#0[0]
    # file5 contains datas#3 comes to page#1[1] - flush page now
    set files [list \
        file1 [lindex $datas 0] {0 0 2048}    \
        file2 [lindex $datas 1] {0 2048 2048} \
        file3 [lindex $datas 2] {1 0 2048}    \
        file4 [lindex $datas 0] {0 0 2048}    \
        file5 [lindex $datas 3] {1 2048 2048} \
    ]
    variable f
    variable d
    variable h
    variable index
} -body {
    cookfs::Mount $file $file -compression none \
        -pagesize 4096 -smallfilesize 4096 -smallfilebuffer 16384
    foreach { f d index } $files {
        makeBinFile $d $f $file
    }
    cookfs::Unmount $file
    # the file size should be (2 pages + internal data) and less than (3 pages)
    assertBetween [file size $file] { 4096 * 2 } { 4096 * 3 }
    set h [cookfs::Mount -readonly $file $file]
    foreach { f d index } $files {
        assertEq [lindex [[$h getindex] get $f] 2] $index "expected fsindex value for $f"
        assertBinEq [viewBinFile $f $file] $d "expected data of file $f"
    }
} -cleanup {
    catch {cookfs::Unmount $file}
} -ok

test cookfsDedup-1.4 "Small file deduplication for different resulting pages" -constraints {enabledTclCmds} -setup {
    set file [makeFile {} pages.cfs]
    # datas is 3 files of 2048 bytes each
    set datas [randomDatas 3 2048]
    # page has 4096 bytes
    # file1 contains datas#0 comes to page#0[0]
    # file2 contains datas#1 comes to page#0[1] - flush page now
    # file3 contains datas#1 uses page#0[1]
    # file4 contains datas#1 uses page#0[1] - the buffer size of the small file
    #                                          has reached the limit and should be flushed.
    #                                          But only 1 page should be used for all 4 files.
    # file5 contains datas#0
    # file6 contains datas#1 - flush page now, but it appears the same page as #0,
    #                           so no new pages need to be created.
    # file7 contains data#1 uses page#0[1]
    # file8 contains data#2 uses page#1[0] - unmount now and flush page#1, even if it's not filled
    set files [list \
        file1 [lindex $datas 0] {0 0 2048}    \
        file2 [lindex $datas 1] {0 2048 2048} \
        file3 [lindex $datas 1] {0 2048 2048} \
        file4 [lindex $datas 1] {0 2048 2048} \
        file5 [lindex $datas 0] {0 0 2048}    \
        file6 [lindex $datas 1] {0 2048 2048} \
        file7 [lindex $datas 1] {0 2048 2048} \
        file8 [lindex $datas 2] {1 0 2048}    \
    ]
    variable f
    variable d
    variable h
    variable index
} -body {
    cookfs::Mount $file $file -compression none \
        -pagesize 4096 -smallfilesize 4096 -smallfilebuffer 8192
    foreach { f d index } $files {
        makeBinFile $d $f $file
    }
    cookfs::Unmount $file
    # the file size should be (1.5 pages + internal data) and less than (2 pages)
    set h [cookfs::Mount -readonly $file $file]
    foreach { f d index } $files {
        assertEq [lindex [[$h getindex] get $f] 2] $index "expected fsindex value for $f"
        assertBinEq [viewBinFile $f $file] $d "expected data of file $f"
    }
} -cleanup {
    catch {cookfs::Unmount $file}
} -ok

test cookfsDedup-2.1.1 "Check that new files can use pages from previously added files, with unmount" -constraints {enabledTclCmds enabledCWriter} -setup {
    # 4 chunks of 2048 bytes, total size: 8192 bytes
    set datas [randomDatas 4 2048]
    set vfs [makeFile {} pages.cfs]
    variable idx
    variable suffix
    variable h
} -body {
    # all files should be on the same page
    cookfs::Mount $vfs $vfs -compression none -pagesize 8192 -smallfilesize 8192 -smallfilebuffer 8192
    foreach idx {0 1 2 3} {
        makeBinFile [lindex $datas $idx] "fileA$idx" $vfs
    }
    cookfs::Unmount $vfs
    # Mount the vfs again
    set h [cookfs::Mount $vfs $vfs -pagesize 8192 -smallfilesize 8192 -smallfilebuffer 8192]
    # Make sure we have only one page
    assertEq [[$h getpages] length] 1 "we have only one page"
    # Add only 1st and 3rd files
    foreach idx {1 3} {
        makeBinFile [lindex $datas $idx] "fileB$idx" $vfs
    }
    cookfs::Unmount $vfs
    # We expect size of archive as original 4 files of 2048 bytes + medatada.
    # It must be less than 5 files.
    assertBetween [file size $vfs] { 4 * 2048 } { 5 * 2048 } "file has expected size"
    # Open the vfs again to make sure there are no new pages, and files are good
    set h [cookfs::Mount $vfs $vfs -readonly]
    # Make sure we have only one page still
    assertEq [[$h getpages] length] 1 "we have only one page"
    foreach idx {1 3} {
        foreach suffix {A B} {
            assertBinEq [viewBinFile "file$suffix$idx" $vfs] [lindex $datas $idx] \
                "file file$suffix$idx has expected data"
        }
    }
} -cleanup {
    catch { cookfs::Unmount $vfs }
} -ok

test cookfsDedup-2.1.2 "Check that new files can use pages from previously added files, without unmount" -constraints {enabledTclCmds enabledCWriter} -setup {
    # 4 chunks of 2048 bytes, total size: 8192 bytes
    set datas [randomDatas 4 2048]
    set vfs [makeFile {} pages.cfs]
    variable idx
    variable suffix
    variable h
} -body {
    # all files should be on the same page
    set h [cookfs::Mount $vfs $vfs -compression none -pagesize 8192 -smallfilesize 8192 -smallfilebuffer 8192]
    foreach idx {0 1 2 3} {
        makeBinFile [lindex $datas $idx] "fileA$idx" $vfs
    }
    # Make sure we have only one page
    assertEq [[$h getpages] length] 1 "we have only one page"
    # Add only 1st and 3rd files
    foreach idx {1 3} {
        makeBinFile [lindex $datas $idx] "fileB$idx" $vfs
    }
    cookfs::Unmount $vfs
    # We expect size of archive as original 4 files of 2048 bytes + medatada.
    # It must be less than 5 files.
    assertBetween [file size $vfs] { 4 * 2048 } { 5 * 2048 } "file has expected size"
    # Open the vfs again to make sure there are no new pages, and files are good
    set h [cookfs::Mount $vfs $vfs -readonly]
    # Make sure we have only one page still
    assertEq [[$h getpages] length] 1 "we have only one page"
    foreach idx {1 3} {
        foreach suffix {A B} {
            assertBinEq [viewBinFile "file$suffix$idx" $vfs] [lindex $datas $idx] \
                "file file$suffix$idx has expected data"
        }
    }
} -cleanup {
    catch { cookfs::Unmount $vfs }
} -ok

test cookfsDedup-2.1.3 "Check that new encrypted files don't use pages from previously added unencryted files" -constraints {enabledTclCmds enabledCWriter cookfsCrypto} -setup {
    # 4 chunks of 2048 bytes, total size: 8192 bytes
    set datas [randomDatas 4 2048]
    set vfs [makeFile {} pages.cfs]
    variable idx
    variable suffix
    variable h
} -body {
    # all files should be on the same page
    set h [cookfs::Mount $vfs $vfs -encryptlevel 0 -compression none -pagesize 8192 -smallfilesize 8192 -smallfilebuffer 8192]
    foreach idx {0 1 2 3} {
        makeBinFile [lindex $datas $idx] "fileA$idx" $vfs
    }
    # Make sure we have only one page
    assertEq [[$h getpages] length] 1 "we have only one page"
    $h password foo
    # Add only 1st and 3rd files
    foreach idx {1 3} {
        makeBinFile [lindex $datas $idx] "fileB$idx" $vfs
    }
    cookfs::Unmount $vfs
    # We expect size of archive as original 4 files + 2 new files of 2048 bytes + medatada.
    assertGt [file size $vfs] { 6 * 2048 } "file has expected size"
    # Open the vfs again to make sure there are no new pages, and files are good
    set h [cookfs::Mount $vfs $vfs -readonly -password foo]
    # Make sure we have 2 pages still (1st page with 4 files and 2nd page with 2 encrypted files)
    assertEq [[$h getpages] length] 2 "we have two pages"
    foreach idx {1 3} {
        foreach suffix {A B} {
            assertBinEq [viewBinFile "file$suffix$idx" $vfs] [lindex $datas $idx] \
                "file file$suffix$idx has expected data"
        }
    }
} -cleanup {
    catch { cookfs::Unmount $vfs }
} -ok

test cookfsDedup-2.1.4 "Check that new unencrypted files don't use pages from previously added encryted files" -constraints {enabledTclCmds enabledCWriter cookfsCrypto} -setup {
    # 4 chunks of 2048 bytes, total size: 8192 bytes
    set datas [randomDatas 4 2048]
    set vfs [makeFile {} pages.cfs]
    variable idx
    variable suffix
    variable h
} -body {
    # all files should be on the same page
    set h [cookfs::Mount $vfs $vfs -encryptlevel 0 -compression none -pagesize 8192 -smallfilesize 8192 -smallfilebuffer 8192]
    $h password foo
    foreach idx {0 1 2 3} {
        makeBinFile [lindex $datas $idx] "fileA$idx" $vfs
    }
    # Make sure we have only one page
    assertEq [[$h getpages] length] 1 "we have only one page"
    # Set non-encrypted mode
    $h password ""
    # Add only 1st and 3rd files
    foreach idx {1 3} {
        makeBinFile [lindex $datas $idx] "fileB$idx" $vfs
    }
    cookfs::Unmount $vfs
    # We expect size of archive as original 4 files + 2 new files of 2048 bytes + medatada.
    assertGt [file size $vfs] { 6 * 2048 } "file has expected size"
    # Open the vfs again to make sure there are no new pages, and files are good
    set h [cookfs::Mount $vfs $vfs -readonly -password foo]
    # Make sure we have 2 pages still (1st page with 4 files and 2nd page with 2 encrypted files)
    assertEq [[$h getpages] length] 2 "we have two pages"
    foreach idx {1 3} {
        foreach suffix {A B} {
            assertBinEq [viewBinFile "file$suffix$idx" $vfs] [lindex $datas $idx] \
                "file file$suffix$idx has expected data"
        }
    }
} -cleanup {
    catch { cookfs::Unmount $vfs }
} -ok

test cookfsDedup-2.1.5 "Check that new encrypted files don't use pages from previously added cryted files" -constraints {enabledTclCmds enabledCWriter cookfsCrypto} -setup {
    # 4 chunks of 2048 bytes, total size: 8192 bytes
    set datas [randomDatas 4 2048]
    set vfs [makeFile {} pages.cfs]
    variable idx
    variable suffix
    variable h
} -body {
    # all files should be on the same page
    set h [cookfs::Mount $vfs $vfs -encryptlevel 0 -password foo -encryptkey -compression none -pagesize 8192 -smallfilesize 8192 -smallfilebuffer 8192]
    foreach idx {0 1 2 3} {
        makeBinFile [lindex $datas $idx] "fileA$idx" $vfs
    }
    # Make sure we have only one page
    assertEq [[$h getpages] length] 1 "we have only one page"
    # Add only 1st and 3rd files
    foreach idx {1 3} {
        makeBinFile [lindex $datas $idx] "fileB$idx" $vfs
    }
    cookfs::Unmount $vfs
    # We expect size of archive as original 4 files + 2 new files of 2048 bytes + medatada.
    assertGt [file size $vfs] { 6 * 2048 } "file has expected size"
    # Open the vfs again to make sure there are no new pages, and files are good
    set h [cookfs::Mount $vfs $vfs -readonly -password foo]
    # Make sure we have 2 pages still (1st page with 4 files and 2nd page with 2 encrypted files)
    assertEq [[$h getpages] length] 2 "we have two pages"
    foreach idx {1 3} {
        foreach suffix {A B} {
            assertBinEq [viewBinFile "file$suffix$idx" $vfs] [lindex $datas $idx] \
                "file file$suffix$idx has expected data"
        }
    }
} -cleanup {
    catch { cookfs::Unmount $vfs }
} -ok

test cookfsDedup-2.2.1 "Check that new files can use pages from previously added and deleted files, with unmount" -constraints {enabledTclCmds enabledCWriter} -setup {
    # 10 chunks of 2048 bytes, total size: 20480 bytes
    set datas [randomDatas 10 2048]
    set vfs [makeFile {} pages.cfs]
    variable idx
    variable h
} -body {
    # all files should be on the same page
    cookfs::Mount $vfs $vfs -compression none -pagesize 20480 -smallfilesize 20480 -smallfilebuffer 20480
    foreach idx {0 1 2 3 4 5 6 7 8 9} {
        makeBinFile [lindex $datas $idx] "fileA$idx" $vfs
    }
    cookfs::Unmount $vfs
    # Mount the vfs again
    set h [cookfs::Mount $vfs $vfs -pagesize 20480 -smallfilesize 20480 -smallfilebuffer 20480]
    # Make sure we have only one page
    assertEq [[$h getpages] length] 1 "we have only one page"
    # Remove 0th, 2nd, 4-5th, 9th files
    foreach idx {0 2 4 5 9} {
        removeFile "fileA$idx" $vfs
    }
    cookfs::Unmount $vfs
    # Mount the vfs again
    cookfs::Mount $vfs $vfs -pagesize 20480 -smallfilesize 20480 -smallfilebuffer 20480
    # Add again all 10 files
    foreach idx {0 1 2 3 4 5 6 7 8 9} {
        makeBinFile [lindex $datas $idx] "fileB$idx" $vfs
    }
    cookfs::Unmount $vfs
    # We expect that all "fileB*" files except 4th and 5th will reuse space from "fileA*" files.
    # The 4th and 5th files will be stored on a different page because the cookfs gap finder
    # will count 2 gaps from these files as one space.
    # Thus, we expect file size more than 12 files of 2048 bytes, but less than 13 files
    assertBetween [file size $vfs] { 12 * 2048 } { 13 * 2048 } "file has expected size"
    # Open the vfs again to make sure there is 1 new page, and files are good
    set h [cookfs::Mount $vfs $vfs -readonly]
    # Make sure we have 2 pages now. The 2nd page is for 4th and 5th files.
    assertEq [[$h getpages] length] 2 "we have two pages"
    foreach idx {0 1 2 3 4 5 6 7 8 9} {
        assertBinEq [viewBinFile "fileB$idx" $vfs] [lindex $datas $idx] \
            "file fileB$idx has expected data"
    }
} -cleanup {
    catch { cookfs::Unmount $vfs }
} -ok

test cookfsDedup-2.2.2 "Check that new files can use pages from previously added and deleted files, without unmount" -constraints {enabledTclCmds enabledCWriter} -setup {
    # 10 chunks of 2048 bytes, total size: 20480 bytes
    set datas [randomDatas 10 2048]
    set vfs [makeFile {} pages.cfs]
    variable idx
    variable h
} -body {
    # all files should be on the same page
    set h [cookfs::Mount $vfs $vfs -compression none -pagesize 20480 -smallfilesize 20480 -smallfilebuffer 20480]
    foreach idx {0 1 2 3 4 5 6 7 8 9} {
        makeBinFile [lindex $datas $idx] "fileA$idx" $vfs
    }
    # Make sure we have only one page
    assertEq [[$h getpages] length] 1 "we have only one page"
    # Remove 0th, 2nd, 4-5th, 9th files
    foreach idx {0 2 4 5 9} {
        removeFile "fileA$idx" $vfs
    }
    # Add again all 10 files
    foreach idx {0 1 2 3 4 5 6 7 8 9} {
        makeBinFile [lindex $datas $idx] "fileB$idx" $vfs
    }
    cookfs::Unmount $vfs
    # This case is different from cookfsDedup-2.2.1. Here we don't unmount vfs,
    # thus we have correct page map. This means, that all "fileB*" files will use
    # space from previously created "fileA*" files.
    # So, we expect only 1 page, and file size should be more than 10 files of
    # 2048 bytes, but less than 11 files.
    assertBetween [file size $vfs] { 10 * 2048 } { 11 * 2048 } "file has expected size"
    # Open the vfs again to make sure there is only one page, and files are good
    set h [cookfs::Mount $vfs $vfs -readonly]
    # Make sure we have only one page still
    assertEq [[$h getpages] length] 1 "we have only one page"
    foreach idx {0 1 2 3 4 5 6 7 8 9} {
        assertBinEq [viewBinFile "fileB$idx" $vfs] [lindex $datas $idx] \
            "file fileB$idx has expected data"
    }
} -cleanup {
    catch { cookfs::Unmount $vfs }
} -ok

test cookfsDedup-2.3.1 "Check dedup of small files which have the same md5 hash, with unmount" -constraints {enabledTclCmds enabledCWriter} -setup {
    set bin1 [binary decode hex 4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2]
    set bin2 [binary decode hex 4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2]
    set side [string repeat x [expr { 1024 - [string length $bin1] }]]
    set vfs [makeFile {} pages.cfs]
    variable h
} -body {
    cookfs::Mount $vfs $vfs -compression none -pagesize 1024 -smallfilesize 1024 -smallfilebuffer 1024
    makeBinFile $bin1 "bin1" $vfs
    makeBinFile $side "side1" $vfs
    cookfs::Unmount $vfs
    set h [cookfs::Mount $vfs $vfs -compression none -pagesize 1024 -smallfilesize 1024 -smallfilebuffer 1024]
    # Make sure we have only one page
    assertEq [[$h getpages] length] 1 "we have only one page"
    # Add bin2 and side2 again. side2 will take the same space as side1, but bin2 should be
    # placed to separate page.
    makeBinFile $bin2 "bin2" $vfs
    makeBinFile $side "side2" $vfs
    cookfs::Unmount $vfs
    # We expect archive size as bin1+bin2+side, but less than bin1+bin2+side+side.
    # bin1+side is 1024 bytes.
    assertBetween [file size $vfs] [expr { 1024 + [string length $bin2] }] { 1024 * 2 } "file has expected size"
    set h [cookfs::Mount $vfs $vfs -readonly]
    # Make sure we have 2 pages
    assertEq [[$h getpages] length] 2 "we have two pages"
} -cleanup {
    catch { cookfs::Unmount $vfs }
} -ok

test cookfsDedup-2.3.2 "Check dedup of small files which have the same md5 hash, without unmount" -constraints {enabledTclCmds enabledCWriter} -setup {
    # $bin1 and $bin2 have the same length and the same MD5 hash
    set bin1 [binary decode hex 4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2]
    set bin2 [binary decode hex 4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2]
    set side [string repeat x [expr { 1024 - [string length $bin1] }]]
    set vfs [makeFile {} pages.cfs]
    variable h
} -body {
    set h [cookfs::Mount $vfs $vfs -compression none -pagesize 1024 -smallfilesize 1024 -smallfilebuffer 1024]
    makeBinFile $bin1 "bin1" $vfs
    makeBinFile $side "side1" $vfs
    # Make sure we have only one page
    assertEq [[$h getpages] length] 1 "we have only one page"
    # Add bin2 and side2 again. side2 will take the same space as side1, but bin2 should be
    # placed to separate page.
    makeBinFile $bin2 "bin2" $vfs
    makeBinFile $side "side2" $vfs
    cookfs::Unmount $vfs
    # We expect archive size as bin1+bin2+side, but less than bin1+bin2+side+side.
    # bin1+side is 1024 bytes.
    assertBetween [file size $vfs] [expr { 1024 + [string length $bin2] }] { 1024 * 2 } "file has expected size"
    set h [cookfs::Mount $vfs $vfs -readonly]
    # Make sure we have 2 pages
    assertEq [[$h getpages] length] 2 "we have two pages"
} -cleanup {
    catch { cookfs::Unmount $vfs }
} -ok

cleanupTests

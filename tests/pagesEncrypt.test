source [file join [file dirname [info script]] common.tcl]

test cookfsPagesEncrypt-1.1.1 "Test error when password argument has no value" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    variable pg
} -body {
    set pg [cookfs::pages -compression none -password $file]
} -cleanup {
    catch { $pg delete }
} -error {wrong # args: should be "cookfs::pages ?-readonly|-readwrite|-encryptkey? ?-password password? ?-encryptlevel level? ?-compression mode? ?-cachesize numPages? ?-endoffset numBytes? ?-compresscommand tclCmd? ?-decompresscommand tclcmd? fileName"}

test cookfsPagesEncrypt-1.1.2 "Test error when password argument is an empty value" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    variable pg
} -body {
    set pg [cookfs::pages -compression none -password "" $file]
} -cleanup {
    catch { $pg delete }
} -error {Unable to create Cookfs object: password value must not be an empty string}

test cookfsPagesEncrypt-1.2 "Test error when encryptlevel argument has no value" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    variable pg
} -body {
    set pg [cookfs::pages -compression none -encryptlevel $file]
    $pg delete
} -cleanup {
    catch { $pg delete }
} -error {wrong # args: should be "cookfs::pages ?-readonly|-readwrite|-encryptkey? ?-password password? ?-encryptlevel level? ?-compression mode? ?-cachesize numPages? ?-endoffset numBytes? ?-compresscommand tclCmd? ?-decompresscommand tclcmd? fileName"}

test cookfsPagesEncrypt-2.1 "Test error for password subcommand with no args" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
} -body {
    $pg password
} -cleanup {
    $pg delete
} -match glob -error {wrong # args: should be "::cookfs::*::pages::handle* password password"}

test cookfsPagesEncrypt-2.2 "Test error for password subcommand with wrong # args" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
} -body {
    $pg password a b
} -cleanup {
    $pg delete
} -match glob -error {wrong # args: should be "::cookfs::*::pages::handle* password password"}

test cookfsPagesEncrypt-3.1 "Check that there are no additinal data after signature with no encryption" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none $file]
    variable size
    variable data
    variable offset
} -body {
    $pg add "TEST"
    $pg delete

    set size [file size $file]
    set data [viewBinFile $file]
    set offset [string last "CFS0003" $data]
    incr offset [string length "CFS0003"]

    expr { $size - $offset }
} -cleanup {
    catch { $pg delete }
} -result 0

test cookfsPagesEncrypt-3.2 "Check that there are 16 bytes (password salt) additinal data after signature with file encryption" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none -encryptlevel 0 -password foo $file]
    variable size
    variable data
    variable offset
} -body {
    $pg add "TEST"
    $pg delete

    set size [file size $file]
    set data [viewBinFile $file]
    set offset [string last "CFS0003" $data]
    incr offset [string length "CFS0003"]

    # Tcl fills memory with byte 0x61 during memory allocation and when
    # memory debugging is enabled. We will use this feature to ensure
    # that salt is initialized with random bytes. It should not be in
    # the form of an array of 0x61 bytes.

    # Ensure that the password salt is initialized with random bytes.
    assertBinNe [string range $data $offset+0 $offset+15] [binary decode hex [string repeat 61 16]] \
        "salt is not initialized"

    expr { $size - $offset }
} -cleanup {
    catch { $pg delete }
} -result 16

test cookfsPagesEncrypt-3.3 "Check that there are 80 bytes additinal data after signature with key-index encryption" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
    variable size
    variable data
    variable offset
} -body {
    $pg add "TEST"
    $pg delete

    set size [file size $file]
    set data [viewBinFile $file]
    set offset [string last "CFS0003" $data]
    incr offset [string length "CFS0003"]

    # Tcl fills memory with byte 0x61 during memory allocation and when
    # memory debugging is enabled. We will use this feature to ensure
    # that salt and IV are initialized with random bytes. They should not
    # be in the form of an array of 0x61 bytes.

    # Ensure that the password salt is initialized with random bytes.
    assertBinNe [string range $data $offset+0 $offset+15] [binary decode hex [string repeat 61 16]] \
        "salt is not initialized"

    # Ensure that the IV is initialized with random bytes.
    assertBinNe [string range $data $offset+16 $offset+31] [binary decode hex [string repeat 61 16]] \
        "IV is not initialized"

    expr { $size - $offset }
    # we expect 80 bytes here:
    # 16 bytes - password salt
    # 16 bytes - encrypted key IV
    # 48 bytes - encrypted key + hash of the encrypted key
} -cleanup {
    catch { $pg delete }
} -result 80

test cookfsPagesEncrypt-3.4 "Check that there are 80 bytes additinal data after signature with key encryption" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey $file]
    variable size
    variable data
    variable offset
} -body {
    $pg password "foo"
    $pg add "TEST"
    $pg delete

    set size [file size $file]
    set data [viewBinFile $file]
    set offset [string last "CFS0003" $data]
    incr offset [string length "CFS0003"]

    # Tcl fills memory with byte 0x61 during memory allocation and when
    # memory debugging is enabled. We will use this feature to ensure
    # that salt and IV are initialized with random bytes. They should not
    # be in the form of an array of 0x61 bytes.

    # Ensure that the password salt is initialized with random bytes.
    assertBinNe [string range $data $offset+0 $offset+15] [binary decode hex [string repeat 61 16]] \
        "salt is not initialized"

    # Ensure that the IV is initialized with random bytes.
    assertBinNe [string range $data $offset+16 $offset+31] [binary decode hex [string repeat 61 16]] \
        "IV is not initialized"

    expr { $size - $offset }
    # we expect 80 bytes here:
    # 16 bytes - password salt
    # 16 bytes - encrypted key IV
    # 48 bytes - encrypted key + hash of the encrypted key
} -cleanup {
    catch { $pg delete }
} -result 80

test cookfsPagesEncrypt-4.1 "Test file encryption" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none -encryptlevel 0 -password foo $file]
    variable data
} -body {
    # this page should be encrypted
    $pg add "TEST00TEST"
    $pg password ""
    # this page should be not encrypted
    $pg add "TEST01TEST"
    $pg password "bar"
    # this page should be encrypted
    $pg add "TEST02TEST"
    # index should be unencrypted
    $pg index "TESTIDXTEST"
    $pg delete

    # check how pages were stored to archive
    set data [viewBinFile $file]
    assertNotContain $data "TEST00TEST"  "page #0 contains unencrypted data"
    assertContain $data    "TEST01TEST"  "page #1 contains encrypted data"
    assertNotContain $data "TEST02TEST"  "page #2 contains unencrypted data"
    assertContain $data    "TESTIDXTEST" "index contains encrypted data"

    # check how pages can be read from archive
    set pg [cookfs::pages -readonly -password foo $file]
    assertEq [$pg get 0] "TEST00TEST"  "page #0: incorrect data"
    assertEq [$pg get 1] "TEST01TEST"  "page #1: incorrect data"
    $pg password "bar"
    assertEq [$pg get 2] "TEST02TEST"  "page #2: incorrect data"
    assertEq [$pg index] "TESTIDXTEST" "index: incorrect data"
} -cleanup {
    $pg delete
} -ok

test cookfsPagesEncrypt-4.2 "Test file encryption, password set after initialization" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none -encryptlevel 0 $file]
    variable data
} -body {
    # this page should be not encrypted
    $pg add "TEST00TEST"
    $pg password "foo"
    # this page should be encrypted
    $pg add "TEST01TEST"
    $pg password "bar"
    # this page should be encrypted
    $pg add "TEST02TEST"
    # index should be unencrypted
    $pg index "TESTIDXTEST"
    $pg delete

    # check how pages were stored to archive
    set data [viewBinFile $file]
    assertContain $data    "TEST00TEST"  "page #0 contains encrypted data"
    assertNotContain $data "TEST01TEST"  "page #1 contains unencrypted data"
    assertNotContain $data "TEST02TEST"  "page #2 contains unencrypted data"
    assertContain $data    "TESTIDXTEST" "index contains encrypted data"

    # check how pages can be read from archive
    set pg [cookfs::pages -readonly $file]
    assertEq [$pg get 0] "TEST00TEST"  "page #0: incorrect data"
    $pg password "foo"
    assertEq [$pg get 1] "TEST01TEST"  "page #1: incorrect data"
    $pg password "bar"
    assertEq [$pg get 2] "TEST02TEST"  "page #2: incorrect data"
    assertEq [$pg index] "TESTIDXTEST" "index: incorrect data"
} -cleanup {
    $pg delete
} -ok

test cookfsPagesEncrypt-4.3 "Test file encryption, wrong password" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none -encryptlevel 0 -password foo $file]
} -body {
    $pg add "TEST00TEST"
    $pg password "bar"
    $pg add "TEST01TEST"
    $pg delete

    set pg [cookfs::pages -readonly $file]
    assertErrMsg { $pg get 0 } {Unable to retrieve chunk: no password specified for decrypting}

    $pg password foo
    # TEST00TEST
    assertEq [$pg get 0] "TEST00TEST"
    $pg password bar
    # TEST01TEST
    assertEq [$pg get 1] "TEST01TEST"

    $pg password ""
    assertErrMsg { $pg get 1 } {Unable to retrieve chunk: no password specified for decrypting}
    $pg password "wrong"
    assertErrMsg { $pg get 1 } {Unable to retrieve chunk: failed to verify read data, the decryption password is incorrect or the archive is corrupted}
} -cleanup {
    $pg delete
} -ok

test cookfsPagesEncrypt-4.4 "Test file encryption, deduplication" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression none -encryptlevel 0 $file]
    variable p0
    variable p1
} -body {
    # add page#0 without encryption
    set p0 [$pg add "TEST0"]
    $pg password "foo"
    # add a page with the same data as page#0, but with encryption enabled.
    # We should get a new page number, not page#0.
    set p1 [$pg add "TEST0"]
    assertNe $p1 $p0
    # add another page with the same data as page#0 and with enabled encryption.
    # We should get the same page number as page#1.
    assertEq [$pg add "TEST0"] $p1
    $pg password ""
    # Now we disabled encryption and add another page with the same data
    # as page#0. We should get the same page number as page#0.
    assertEq [$pg add "TEST0"] $p0

    # As for now, we have 2 pages:
    # page#0 - without password
    # page#1 - encrypted with password "foo"

    # Let's define another password and try to add a page. Cookfs should try
    # to use page#1, but since we now have a different password, it must fail
    # to decrypt page#1 and use the new page number (index == 2).

    $pg password "bar"
    assertEq [$pg add "TEST0"] 2

    # now let's reopen the archive with another password
    $pg delete
    set pg [cookfs::pages -password qux $file]

    # The next page should get the next index (index == 3)
    assertEq [$pg add "TEST0"] 3

    # But if we set the password we used for $p1 ("foo"), we get the same
    # index as for $p1.
    $pg password "foo"
    assertEq [$pg add "TEST0"] $p1
} -cleanup {
    $pg delete
} -ok

test cookfsPagesEncrypt-5.1 "Test key-index encryption" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
    variable data
} -body {
    # this page should be encrypted
    $pg add "TEST00TEST"
    $pg password ""
    # this page should be not encrypted
    $pg add "TEST01TEST"
    $pg password "bar"
    # this page should be encrypted
    $pg add "TEST02TEST"
    # index should be unencrypted
    $pg index "TESTIDXTEST"
    $pg delete

    # check how pages were stored to archive
    set data [viewBinFile $file]
    assertNotContain $data "TEST00TEST"  "page #0 contains unencrypted data"
    assertContain $data    "TEST01TEST"  "page #1 contains encrypted data"
    assertNotContain $data "TEST02TEST"  "page #2 contains unencrypted data"
    assertNotContain $data "TESTIDXTEST" "index contains unencrypted data"

    # Check how pages can be read from archive. The latest password was "bar".
    set pg [cookfs::pages -readonly -password bar $file]
    assertEq [$pg get 0] "TEST00TEST"  "page #0: incorrect data"
    assertEq [$pg get 1] "TEST01TEST"  "page #1: incorrect data"
    # As we have key-based encryption, we have set any password.
    $pg password "foo"
    assertEq [$pg get 2] "TEST02TEST"  "page #2: incorrect data"
    assertEq [$pg index] "TESTIDXTEST" "index: incorrect data"
} -cleanup {
    $pg delete
} -ok

test cookfsPagesEncrypt-5.2.1 "Test key-index encryption, open protected archive without password (readonly mode)" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
} -body {
    $pg add "TEST00TEST"
    $pg delete
    set pg [cookfs::pages -readonly $file]
} -cleanup {
    catch { $pg delete }
} -error {Unable to create Cookfs object: the required password for the encrypted archive is missing}

test cookfsPagesEncrypt-5.2.2 "Test key-index encryption, open protected archive without password (readwrite mode)" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
} -body {
    $pg add "TEST00TEST"
    $pg delete
    set pg [cookfs::pages $file]
} -cleanup {
    catch { $pg delete }
} -error {Unable to create Cookfs object: the required password for the encrypted archive is missing}

test cookfsPagesEncrypt-5.3.1 "Test key-index encryption, open protected archive with wrong password (readonly mode)" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
} -body {
    $pg add "TEST00TEST"
    $pg delete
    set pg [cookfs::pages -readonly -password bar $file]
} -cleanup {
    catch { $pg delete }
} -error {Unable to create Cookfs object: could not decrypt the encryption key with the specified password}

test cookfsPagesEncrypt-5.3.2 "Test key-index encryption, open protected archive with wrong password (read-write mode)" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
} -body {
    $pg add "TEST00TEST"
    $pg delete
    set pg [cookfs::pages -password bar $file]
} -cleanup {
    catch { $pg delete }
} -error {Unable to create Cookfs object: could not decrypt the encryption key with the specified password}

test cookfsPagesEncrypt-5.3.3 "Test key-index encryption, open protected archive with wrong password (read-write mode), ensure that archive is not broken" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
} -body {
    $pg add "TEST00TEST"
    $pg delete

    # Try to open with wrong password
    assertErrMsg {cookfs::pages -password bar $file} {Unable to create Cookfs object: could not decrypt the encryption key with the specified password}

    set pg [cookfs::pages -password foo $file]
    $pg get 0
} -cleanup {
    $pg delete
} -result {TEST00TEST}

test cookfsPagesEncrypt-5.4 "Test key-index encryption, deduplication" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
    variable p0
    variable p1
} -body {
    # add page#0 with encryption
    set p0 [$pg add "TEST0"]
    $pg password "foo"
    # add a page with the same data as page#0. We should get the same index.
    assertEq [$pg add "TEST0"] $p0
    $pg password ""
    # Now we disabled encryption and add another page with the same data
    # as page#0. We should get new index (index == 1)
    set p1 [$pg add "TEST0"]
    assertEq $p1 1

    # As for now, we have 2 pages:
    # page#0 - with password
    # page#1 - without password

    # Let's define another password and try to add a page. Since we are using
    # key-based encryption, cookfs should find page#0.

    $pg password "bar"
    assertEq [$pg add "TEST0"] $p0

    # now let's reopen the archive
    $pg delete
    set pg [cookfs::pages -password bar $file]

    # The next page should get the same index as page#0, since we are in encryption
    # mode after reopening.
    assertEq [$pg add "TEST0"] $p0

    # But if we disable encryption, we should get the same index as $p2.
    $pg password ""
    assertEq [$pg add "TEST0"] $p1
} -cleanup {
    $pg delete
} -ok

test cookfsPagesEncrypt-5.5 "Test password change for key-index encryption" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Set a password at initialization to enable index encryption
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
    variable size1
    variable data1
    variable offset1
    variable size2
    variable data2
    variable offset2
} -body {
    $pg add "TEST0"
    $pg delete

    set size1 [file size $file]
    set data1 [viewBinFile $file]
    set offset1 [string last "CFS0003" $data1]
    incr offset1 [string length "CFS0003"]

    # Open the archive with the old password
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
    # Make sure we can read the encrypted page
    assertEq [$pg get 0] "TEST0" "Pass#0: Page#0 doesn't match"

    # Change the password
    $pg password "bar"
    $pg delete

    set size2 [file size $file]
    set data2 [viewBinFile $file]
    set offset2 [string last "CFS0003" $data2]
    incr offset2 [string length "CFS0003"]

    # Open the archive with the new password
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password bar $file]
    # Make sure we can read the encrypted page
    assertEq [$pg get 0] "TEST0" "Pass#1: Page#0 doesn't match"

    $pg delete

    # Make sure that file size and signature offsets are not changed.
    assertEq $size1 $size2
    assertEq $offset1 $offset2
    # Make sure that the contents of the file before signing are not modified
    assertBinEq [string range $data1 0 $offset1] [string range $data2 0 $offset2] \
        "The contents of the file have been changed"
    # Verify that the encryption key has been changed
    assertBinNe [string range $data1 $offset1 end] [string range $data2 $offset2 end] \
        "The encryption key have not been changed"
} -cleanup {
    catch { $pg delete }
} -ok

test cookfsPagesEncrypt-6.1 "Test key encryption" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Do not set a password at initialization to avoid encrypting the indexes
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey $file]
    variable data
} -body {
    $pg password "foo"
    # this page should be encrypted
    $pg add "TEST00TEST"
    $pg password ""
    # this page should be not encrypted
    $pg add "TEST01TEST"
    $pg password "bar"
    # this page should be encrypted
    $pg add "TEST02TEST"
    # index should be unencrypted
    $pg index "TESTIDXTEST"
    $pg delete

    # check how pages were stored to archive
    set data [viewBinFile $file]
    assertNotContain $data "TEST00TEST"  "page #0 contains unencrypted data"
    assertContain $data    "TEST01TEST"  "page #1 contains encrypted data"
    assertNotContain $data "TEST02TEST"  "page #2 contains unencrypted data"
    assertContain $data    "TESTIDXTEST" "index contains encrypted data"

    # Check how pages can be read from archive. The latest password was "bar".
    set pg [cookfs::pages -readonly -password bar $file]
    assertEq [$pg get 0] "TEST00TEST"  "page #0: incorrect data"
    assertEq [$pg get 1] "TEST01TEST"  "page #1: incorrect data"
    # As we have key-based encryption, we have set any password.
    $pg password "foo"
    assertEq [$pg get 2] "TEST02TEST"  "page #2: incorrect data"
    assertEq [$pg index] "TESTIDXTEST" "index: incorrect data"
} -cleanup {
    $pg delete
} -ok

test cookfsPagesEncrypt-6.2 "Test key encryption, without password and with wrong password" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Do not set a password at initialization to avoid encrypting the indexes
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey $file]
} -body {
    $pg add "TEST00TEST"
    $pg password "foo"
    $pg add "TEST01TEST"
    $pg delete

    set pg [cookfs::pages -readonly $file]

    # TEST00TEST
    assertEq [$pg get 0] "TEST00TEST"

    assertErrMsg { $pg get 1 } {Unable to retrieve chunk: no password specified for decrypting}
    assertErrMsg { $pg password "bar" } {could not decrypt the encryption key with the specified password}

    $pg password "foo"
    assertEq [$pg get 1] "TEST01TEST"
} -cleanup {
    $pg delete
} -ok

test cookfsPagesEncrypt-6.3 "Test key encryption, deduplication" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Do not set a password at initialization to avoid encrypting the indexes
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey $file]
    variable p0
    variable p1
} -body {
    # add page#0 without encryption
    set p0 [$pg add "TEST0"]
    $pg password "foo"
    # add a page with the same data as page#0, but with encryption enabled.
    # We should get a new page number, not page#0.
    set p1 [$pg add "TEST0"]
    assertNe $p0 $p1
    # add another page with the same data as page#0 and with enabled encryption.
    # We should get the same page number as page#1.
    assertEq [$pg add "TEST0"] $p1
    $pg password ""
    # Now we disabled encryption and add another page with the same data
    # as page#0. We should get the same page number as page#0.
    assertEq [$pg add "TEST0"] $p0

    # As for now, we have 2 pages:
    # page#0 - without password
    # page#1 - encrypted with password

    # Let's define another password and try to add a page. Since we are using
    # key-based encryption, we must successfully use page $p1.

    $pg password "bar"
    assertEq [$pg add "TEST0"] $p1

    # now let's reopen the archive without password
    $pg delete
    set pg [cookfs::pages $file]

    # Ensure that we have 2 pages
    assertEq [$pg length] 2

    # We are not in encrypted mode. The next page should get the same index as $p0.
    assertEq [$pg add "TEST0"] $p0

    # But if we set the password, we will get the same index as $p1.
    $pg password "bar"
    assertEq [$pg add "TEST0"] $p1
} -cleanup {
    $pg delete
} -ok

test cookfsPagesEncrypt-6.4 "Test password change for key encryption" -constraints {enabledTclCmds cookfsCrypto} -setup {
    set file [makeFile {} pages.cfs]
    # Do not set a password at initialization to avoid encrypting the indexes
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey $file]
    variable size1
    variable data1
    variable offset1
    variable size2
    variable data2
    variable offset2
} -body {
    $pg password foo
    $pg add "TEST0"
    $pg delete

    set size1 [file size $file]
    set data1 [viewBinFile $file]
    set offset1 [string last "CFS0003" $data1]
    incr offset1 [string length "CFS0003"]

    # Open the archive with the old password
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password foo $file]
    # Make sure we can read the encrypted page
    assertEq [$pg get 0] "TEST0" "Pass#0: Page#0 doesn't match"

    # Change the password
    $pg password "bar"
    $pg delete

    set size2 [file size $file]
    set data2 [viewBinFile $file]
    set offset2 [string last "CFS0003" $data2]
    incr offset2 [string length "CFS0003"]

    # Open the archive with the new password
    set pg [cookfs::pages -compression none -encryptlevel 0 -encryptkey -password bar $file]
    # Make sure we can read the encrypted page
    assertEq [$pg get 0] "TEST0" "Pass#1: Page#0 doesn't match"

    $pg delete

    # Make sure that file size and signature offsets are not changed.
    assertEq $size1 $size2
    assertEq $offset1 $offset2
    # Make sure that the contents of the file before signing are not modified
    assertBinEq [string range $data1 0 $offset1] [string range $data2 0 $offset2]
    # Verify that the encryption key has been changed
    assertBinNe [string range $data1 $offset1 end] [string range $data2 $offset2 end]
} -cleanup {
    catch { $pg delete }
} -ok

test cookfsPagesEncrypt-7.1 "Test encryption with custom compression" -constraints {
    enabledTclCmds cookfsCrypto enabledTclCallbacks
} -setup {
    set file [makeFile {} pages.cfs]
    set pg [cookfs::pages -compression custom -alwayscompress \
        -compresscommand testcompress -decompresscommand testdecompress \
        -encryptlevel 0 -password foo $file]
    variable data
} -body {
    # this page should be encrypted
    $pg add "TEST00TEST"
    $pg password ""
    # this page should be not encrypted
    $pg add "TEST01TEST"
    $pg password "bar"
    # this page should be encrypted
    $pg add "TEST02TEST"
    # index should be unencrypted
    $pg index "TESTIDXTEST"
    $pg delete

    # Check how pages were stored to archive.
    set data [viewBinFile $file]
    assertNotContain $data [testcompress "TEST00TEST"]  "page #0 contains unencrypted data"
    assertContain $data    [testcompress "TEST01TEST"]  "page #1 contains encrypted data"
    assertNotContain $data [testcompress "TEST02TEST"]  "page #2 contains unencrypted data"
    assertContain $data    [testcompress "TESTIDXTEST"] "index contains encrypted data"

    # check how pages can be read from archive
    set pg [cookfs::pages \
        -compresscommand testcompress -decompresscommand testdecompress \
        -readonly -password foo $file]
    assertEq [$pg get 0] "TEST00TEST"  "page #0: incorrect data"
    assertEq [$pg get 1] "TEST01TEST"  "page #1: incorrect data"
    $pg password "bar"
    assertEq [$pg get 2] "TEST02TEST"  "page #2: incorrect data"
    assertEq [$pg index] "TESTIDXTEST" "index: incorrect data"
} -cleanup {
    $pg delete
    unset -nocomplain testcompresscount testdecompresscount
} -ok

test cookfsPagesEncrypt-8.1 "Test encryption with async compression" -constraints {
    enabledTclCmds cookfsCrypto enabledTclCallbacks
} -setup {
    set file [makeFile {} pages.cfs]
    set ::testasynccompressfinalized 0
    set pg [cookfs::pages -compression custom -alwayscompress \
        -asynccompresscommand testasynccompress -decompresscommand testdecompress \
        -compresscommand testcompress -decompresscommand testdecompress \
        -encryptlevel 0 -password foo $file]
    variable data
} -body {
    # this page should be encrypted
    $pg add "TEST00TEST"
    $pg add "TEST01TEST"
    $pg password ""
    # this page should be not encrypted
    $pg add "TEST10TEST"
    $pg add "TEST11TEST"
    $pg password "bar"
    # this page should be encrypted
    $pg add "TEST20TEST"
    $pg add "TEST21TEST"
    # index should be unencrypted
    $pg index "TESTIDXTEST"
    $pg delete

    assertEq $::testasynccompressfinalized 1

    # Check how pages were stored to archive.
    set data [viewBinFile $file]
    assertNotContain $data [testcompress "TEST00TEST"]  "page #0 contains unencrypted data"
    assertNotContain $data [testcompress "TEST01TEST"]  "page #1 contains unencrypted data"
    assertContain $data    [testcompress "TEST10TEST"]  "page #2 contains encrypted data"
    assertContain $data    [testcompress "TEST11TEST"]  "page #3 contains encrypted data"
    assertNotContain $data [testcompress "TEST20TEST"]  "page #4 contains unencrypted data"
    assertNotContain $data [testcompress "TEST21TEST"]  "page #5 contains unencrypted data"
    assertContain $data    [testcompress "TESTIDXTEST"] "index contains encrypted data"

    # check how pages can be read from archive
    set pg [cookfs::pages \
        -asynccompresscommand testasynccompress -decompresscommand testdecompress \
        -compresscommand testcompress -decompresscommand testdecompress \
        -readonly -password foo $file]

    assertEq [$pg get 0] "TEST00TEST"  "page #0: incorrect data"
    assertEq [$pg get 1] "TEST01TEST"  "page #1: incorrect data"
    assertEq [$pg get 2] "TEST10TEST"  "page #2: incorrect data"
    assertEq [$pg get 3] "TEST11TEST"  "page #3: incorrect data"
    $pg password "bar"
    assertEq [$pg get 4] "TEST20TEST"  "page #4: incorrect data"
    assertEq [$pg get 5] "TEST21TEST"  "page #5: incorrect data"
    assertEq [$pg index] "TESTIDXTEST" "index: incorrect data"
} -cleanup {
    $pg delete
    unset -nocomplain testcompresscount testdecompresscount
    unset -nocomplain testasynccompresscount testasynccompressqueue testasynccompressfinalized
} -ok

cleanupTests

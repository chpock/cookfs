tcltest::test cookfsVfs-1.1 "Mount empty filename" -setup {
} -body {
    vfs::cookfs::Mount "" ""
} -cleanup {
} -returnCodes {error} -result {Unable to create Cookfs object}

tcltest::test cookfsVfs-1.2 "Mount non-existant file as read-write" -setup {
    set file [tcltest::makeFile {} cookfs.cfs]
} -body {
    set fsid [vfs::cookfs::Mount $file $file]
    vfs::unmount $file
    set fsid
} -cleanup {
    tcltest::removeFile $file
    unset fsid
} -returnCodes {ok} -match glob -result {::cookfs::mount*}

tcltest::test cookfsVfs-1.3 "Mount non-existant file as read-only" -setup {
    set file [tcltest::makeFile {} cookfs.cfs]
} -body {
    vfs::cookfs::Mount -readonly $file $file
} -cleanup {
    catch {vfs::unmount $file}
    tcltest::removeFile $file
} -returnCodes {error} -result {Unable to create Cookfs object}

tcltest::test cookfsVfs-2.1 "Test compressing entire directory structure" -setup {
    set dir [tcltest::makeDirectory cookfs.vfs]
    set file [tcltest::makeFile {} cookfs.cfs]
} -body {
    foreach d {scripts generic tclconfig configure} {
	file copy -force [file join [tcltest::testsDirectory] .. $d] [file join $dir $d]
    }
    vfs::cookfs::Mount $file $file
    file copy -force $dir [file join $file vfs]
    testIfEqual $dir [file join $file vfs]
} -cleanup {
    catch {vfs::unmount $file}
    tcltest::removeDirectory $dir
    tcltest::removeFile $file
} -returnCodes {ok} -result 1

tcltest::test cookfsVfs-2.2 "Test compressing entire directory structure after remount" -setup {
    set dir [tcltest::makeDirectory cookfs.vfs]
    set file [tcltest::makeFile {} cookfs.cfs]
} -body {
    foreach d {scripts generic tclconfig configure} {
	file copy -force [file join [tcltest::testsDirectory] .. $d] [file join $dir $d]
    }
    vfs::cookfs::Mount $file $file
    file copy -force $dir [file join $file vfs]
    vfs::unmount $file
    vfs::cookfs::Mount $file $file
    testIfEqual $dir [file join $file vfs]
} -cleanup {
    catch {vfs::unmount $file}
    tcltest::removeDirectory $dir
    tcltest::removeFile $file
} -returnCodes {ok} -result 1

tcltest::test cookfsVfs-3.1 "Test creating files in non-existant directory in VFS" -setup {
    set file [tcltest::makeFile {} cookfs.cfs]
    set fsid [vfs::cookfs::Mount $file $file]
} -body {
    close [open $file/somedir/file w]
} -cleanup {
    vfs::unmount $file
    tcltest::removeFile $file
} -returnCodes {error} -match glob -result "*no such file or directory*"

tcltest::test cookfsVfs-3.2 "Test creating files in file in VFS" -setup {
    set file [tcltest::makeFile {} cookfs.cfs]
    set fsid [vfs::cookfs::Mount $file $file]
} -body {
    close [open $file/file w]
    close [open $file/file/otherfile w]
} -cleanup {
    vfs::unmount $file
    tcltest::removeFile $file
} -returnCodes {error} -match glob -result "*not a directory*"

tcltest::test cookfsVfs-3.3 "Test creating directories in file in VFS" -setup {
    set file [tcltest::makeFile {} cookfs.cfs]
    set fsid [vfs::cookfs::Mount $file $file]
} -body {
    close [open $file/file w]
    file mkdir $file/file/somedir
} -cleanup {
    vfs::unmount $file
    tcltest::removeFile $file
} -returnCodes {error} -match glob -result "*file already exists*"

tcltest::test cookfsVfs-3.4 "Test creating directories and files" -setup {
    set file [tcltest::makeFile {} cookfs.cfs]
    set fsid [vfs::cookfs::Mount $file $file]
} -body {
    file mkdir $file/dir1
    file mkdir $file/dir2
    file mkdir $file/dir2/dir3
    close [open $file/file2 w]
    close [open $file/dir2/file4 w]
    close [open $file/dir2/dir3/file5 w]
    vfs::unmount $file
    set fsid [vfs::cookfs::Mount $file $file]
    concat \
        [lsort [glob -tails -directory $file * */* */*/*]] \
        [lsort [glob -tails -directory $file -type d -nocomplain * */* */*/*]] \
        [lsort [glob -tails -directory $file -type f -nocomplain * */* */*/*]]
} -cleanup {
    vfs::unmount $file
    tcltest::removeFile $file
} -returnCodes {ok} -result {dir1 dir2 dir2/dir3 dir2/dir3/file5 dir2/file4 file2 dir1 dir2 dir2/dir3 dir2/dir3/file5 dir2/file4 file2}

tcltest::test cookfsVfs-4.1 "Test add-aside feature" -constraints cookfsAside -setup {
    set file [tcltest::makeFile {} cookfs.cfs]
    set file2 [tcltest::makeFile {} cookfs2.cfs]
    set fsid [vfs::cookfs::Mount $file $file]
    close [open $file/file1 w]
    file mkdir $file/dir1
    vfs::unmount $file
} -body {
    set fsid [vfs::cookfs::Mount -readonly $file $file]
    cookfs::aside $fsid $file2
    file mkdir $file/dir2
    close [open $file/file2 w]
    vfs::unmount $file

    set fsid [vfs::cookfs::Mount -readonly $file $file]
    cookfs::aside $fsid $file2
    lsort [glob -directory $file -tails *]
} -cleanup {
    catch {vfs::unmount $file}
    tcltest::removeFile $file
    tcltest::removeFile $file2
} -returnCodes {ok} -result {dir1 dir2 file1 file2}


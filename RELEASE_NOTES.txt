===============================================================================
Release version 1.7.0

Notable changes:

1. Added multithreading support. It is now possible to mount cookfs
in multithreaded mode. In this mode cookfs will be available to all
application threads in read-write mode.

2. Added ability to specify compression level for all supported
compression algorithms. The optimal level is used by default.

3. Added support for Zstandard compression (not enabled by default).

4. Added support for brotli compression (not enabled by default).

===============================================================================
Release version 1.6.0

Notable changes:

1. Added C variants for all parts of Cookfs. Removed dependency on tclvfs.
This means that now the cookfs package does not depend on any Tcl scripts
and will work when built as a single loadable binary module. If static
linking is used, the process is also significantly simplified. You can use
VFS immediately after loading a static package.

2. Added the ability to detect that a file has been truncated. This is
a common error when a file is copied/downloaded incompletely. In this case
the file is corrupted and using it causes an error. If it is tclkit, then
it will cause an application startup error. Usually in such cases some error
like "file system mount error", "interpreter initialization error" or
some "internal error" is returned. This completely confuses the user and
leads to the wrong conclusion that the application is not working.
Cookfs tries to identify such cases. If such a case is detected, then cookfs
will return the following error:

    The archive "<filename>" appears to be corrupted or truncated. Expected
    archive size is <size> bytes or larger.

3. Added support for Tcl 9

4. Tests have been significantly improved. Added an automatic check for memory
leaks to CI. It can be confidently confirmed that there are no memory leaks
in this module.

5. Added a simple (for now) interface to mount VFS from C code.

6. XZ format was replaced by a simple LZMA. This allowed to reduce the size
of the module and the size of the service data in the archive, which
is generated by XZ format. Also, the LZMA library has been updated
from v23.01 to v.24.05

7. Added the ability to create a VFS entirely in memory (in-memory VFS),
without using a physical file.

8. Other miscellaneous updates and bug fixes.


* Investigate an issue with -directory parameter for glob.
  See tests cookfsVfs-1.8.4.1.1 and cookfsVfs-1.8.4.1.2.
  Then some variable (object) is passed to -directory argument
  of the command glob, then internal cookfs representation is
  linked to this object. But this representation is not freed
  even if variable (object) is removed. It is released only at
  the end of the evaluation of the Tcl source file. It is need
  to be investogated why internal representation is not released
  when corresponding object is deleted.
  Similar issue is in cookfsVfs-29.1.3 in vfs.test

* Add documentation as HTML to github pages

* Update bzip2 and use it as a submodule. Perhaps this will get rid of its compile-time warnings.

* Add ability/subcommand to copy files from/to cookfs more efficiently than using 'file copy'.
  It can be something like 'cookfs copy <from disk> <cookfs endpoint>"

* Add support for storing file permissions and attributes (for Windows platform)

* Add support for storing any metadata assotiated with particular file/directory

* Cookfs_AttrGet_Mount() creates new object as mount point for each request.
  Mount point object should be cached somehow for specific thread and cached
  object should be returned each time.

* Add support for 'zipfs mkimg'-like command

* Allow to get/set parameters and manage cookfs via global command ::cookfs
cookfs copy /foo/bar $mount_point

* Combine readerchannel and writerchannel to one channel reader/writer

* Refactore the aside feature. Currently it doesn't work at all. In particular:
  - Cookfs_FsindexModifyBlockUsage() and Cookfs_FsindexGetBlockUsage() know
    nothing about pages in aside (these are pages with COOKFS_PAGES_ASIDE bit set).
    Cookfs_FsindexModifyBlockUsage() tries to alloc huge buffer size as aside
    page numbers are 0x10000000+
  - Cookfs_PgIndex* functions don't work with aside page numbers. Actually,
    They should not be called on aside pages numbers. For aside page numbers,
    these functions should be called from aside page object.

== Examples

* Add simple example of tclsh with cookfs. Compare with tclsh9+zipfs (size and
loading speed). This example will cover cookfs usage from C side.

* Add an example of a Tcl archiver application that uses the cookfs format.
It will be like any other archiver and will support file
compression/decompression. This example will cover cookfs usage from Tcl side.

===== Plans for cookfs 2.0

* Remove support for Tcl layer for pages, fsindex, vfs, etc. Supporting both runtimes is too costly.

* Remove support for CRC32 hash type. It is here only to provide compatibility with Tcl layer.

* Remove all Tcl commands for pages, fsindex, mount handle by default. Allow them only for testing.
  Everything should be controlled via attributes.
